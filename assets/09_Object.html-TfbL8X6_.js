import{_ as c}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as p,o as i,c as u,a as n,b as a,e as s,w as t,d as l}from"./app-DnMTRoWd.js";const r={},d=l('<p><strong>学习目标</strong></p><p>掌握使用Object中的如下成员方法</p><ul><li>getClass()</li><li>toString()</li><li>equals()</li><li>hashCode()</li><li>clone()</li></ul><h1 id="api概述" tabindex="-1"><a class="header-anchor" href="#api概述" aria-hidden="true">#</a> API概述</h1><p>API，全称<strong>Application Programming Interface</strong>，也就是应用程序编程接口。</p>',5),k=n("strong",null,"接口",-1),h=n("strong",null,"interface",-1),v=n("strong",null,"指一些已经预先定义好的，暴露给外界使用的方法或者工具。",-1),g=n("p",null,"API的使用者，可以在不关注具体实现细节的前提下，使用这些已经预先定义好的方法和工具实现自己的需求。",-1),b=n("strong",null,"“API caller”",-1),m=n("p",null,[a("学习API，我们应该将学习的重心放在学习**”方法“"),n("strong",null,"上，API使用的本质就是"),a("方法调用**，从这个角度上来说，API的学习是非常简单的。")],-1),_=n("p",null,"但要想理清楚其中的逻辑，正确使用API，还需要多加练习.",-1),f=n("p",null,"在学习官方Java API以及其它流行的三方API时，我们可以参考官方文档去学习，也可以利用搜索引擎去了解其中的细节。而以后到了公司中，程序员之间互相交流API，就需要依赖于特定格式的API文档。",-1),y=n("h1",{id:"object概述",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#object概述","aria-hidden":"true"},"#"),a(" Object概述")],-1),q=n("p",null,"Object类，我们虽然我们没有详细了解，但我们已经：Object类是所有类继承层次的祖先类，Java中所有类（包括数组）都直接或者间接的继承自该类，都实现了该类的方法。",-1),j=n("strong",null,"extends Object",-1),C=n("strong",null,"直接父类",-1),w=l('<p><strong>Object类是没有成员变量定义的，并且由于子类对象的隐式初始化，Object类有且仅有一个默认提供的无参构造方法。</strong></p><p><span style="color:red;background:yellow;"><strong>我们学习Object类，主要关注它的成员方法。</strong></span></p><h1 id="object成员方法" tabindex="-1"><a class="header-anchor" href="#object成员方法" aria-hidden="true">#</a> Object成员方法</h1><table><thead><tr><th>protected Object</th><th>clone() 创建并返回此对象的一个副本。</th></tr></thead><tbody><tr><td>boolean</td><td>equals(Object obj) 指示其他某个对象是否与此对象“相等”。</td></tr><tr><td>protected void</td><td>finalize() 当垃圾回收器确定不存在对该对象的更多引用时，由对象的垃圾回收器调用此方法。</td></tr><tr><td>Class&lt;?&gt;</td><td>getClass() 返回此 Object 的运行时类。</td></tr><tr><td>int</td><td>hashCode() 返回该对象的哈希码值。</td></tr><tr><td>void</td><td>notify() 唤醒在此对象监视器上等待的单个线程。</td></tr><tr><td>void</td><td>notifyAll() 唤醒在此对象监视器上等待的所有线程。</td></tr><tr><td>String</td><td>toString() 返回该对象的字符串表示。</td></tr><tr><td>void</td><td>wait() 在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待。</td></tr></tbody></table><p>说明:</p><p>像notify()、wait()等成员方法, 它们都和Java的线程有关系，多线程中再学习。</p><p>先来一个大致的、笼统的认识：</p>',7),x=l('<li><p><span style="color:red;background:yellow;"><strong>equals(Object obj)方法用于判断对象相等，很常用、非常重要。</strong></span></p></li><li><p><span style="color:red;background:yellow;"><strong>hashCode()方法用于获取哈希值，在集合的场景下使用，也是一个很重要的方法。</strong></span></p><p><strong>注：equals和hashCode这两个方法，关系紧密，要结合起来学习。</strong></p></li><li><p>finalize()方法，仅作了解，没有实际意义。</p><p>注：该方法在Java9开始，被注解**@Deprecated**标记，表示它是一个被放弃使用的过失方法。</p><p>规范的Java开发中，不应该使用过时方法或者类。</p></li><li><p>clone()方法，克隆，一种创建对象的新方式。该方法并不常用，建议仅作了解。</p></li>',4),S=l(`<h2 id="getclass方法" tabindex="-1"><a class="header-anchor" href="#getclass方法" aria-hidden="true">#</a> getClass方法</h2><h3 id="方法的声明" tabindex="-1"><a class="header-anchor" href="#方法的声明" aria-hidden="true">#</a> 方法的声明</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">native</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>解释：</p>`,4),O=n("li",null,[n("p",null,"首先它的访问权限修饰符是public，可以任意访问，没有访问权限问题。")],-1),z=n("li",null,[n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"final修饰它，表示它无法被重写。")])])],-1),J=n("li",null,[n("p",null,"native表示该方法是一个本地方法，指的是Java调用其它语言（主要是C/C++）的实现来完成功能的方法。本地方法不需要方法体，我们也不会考虑它的实现细节。（该方法的作用可以通过查阅API文档了解）")],-1),I=n("code",null,"Class<?>",-1),A=n("strong",null,"Class对象",-1),D=n("strong",null,"<?>",-1),B=n("h3",{id:"作用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#作用","aria-hidden":"true"},"#"),a(" 作用")],-1),E=n("strong",null,"通过一个本地方法的实现，去获取Class对象。",-1),P=n("p",null,"接下来的主要问题是：",-1),K=l('<p>接下来，我们就主要来研究一下Class类和它的对象。</p><h3 id="class对象" tabindex="-1"><a class="header-anchor" href="#class对象" aria-hidden="true">#</a> Class对象</h3><p>要想了解什么是Class对象，还需要从类加载的机制开始讲起。</p><p>现在我们已经对类加载很熟悉了，在类加载过程中，JVM通过读取某个类的二进制字节码文件，了解该类型。</p><p><strong>也就是说，程序运行期间，JVM通过类加载能够了解某个类型的信息。</strong></p><p><span style="color:red;background:yellow;"><strong>那么如果程序员也想在程序的运行期间，动态获取某个类的类型信息呢？</strong></span></p><blockquote><p>为什么程序员需要在程序的运行期间，动态获取类型信息呢？</p><p>如果运行期间程序员能动态获取类型信息，那么就意味着程序员：</p><p><span style="color:red;background:yellow;"><strong>可以在不事先知道该类内容的前提下，直接在程序运行期间，对该类做一些操作（比如创建对象，调用方法，访问属性等）</strong></span></p><p>这种需求是很常见的，意味着程序具有了动态性，大大提升程序的灵活性。</p><p>这其实就是Java的反射技术，我们会在后面学习该知识点。</p></blockquote><p>既然有需求，那Java语法的设计就要满足它，这时仍然需要JVM来做一些特殊操作：</p><p><span style="color:red;background:yellow;"><strong>JVM在类加载某个类的同时，会在堆上自动创建一个“封装了该类所有类型信息”的对象，被称之为该类的运行时类对象。</strong></span></p><p>具体来说，某个类的运行时类对象，就是该类的Class对象。</p><p>某个类的Class对象当中，包含了该类的所有类型信息**（比如类名是啥，有哪些方法、变量、构造器等）**</p><p>于是程序员在程序的运行时期，只需要获取该类的Class对象，就能够获取类型信息了。</p><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项" aria-hidden="true">#</a> 注意事项</h3>',13),V=n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"getClass()方法只是获取Class对象，该方法不负责创建Class对象。")]),a("正确来说，某个类的Class对象是JVM在类加载某个类的同时，在堆上创建的，Class对象是JVM创建的。")],-1),N=n("p",null,"getClass()方法相当于是返回了堆上这个Class对象的引用。",-1),T=n("p",null,"这种操作实际上Java代码本身是做不到的（没有引用的对象无法直接用Java方法获取）",-1),M=n("p",null,"所以该方法是一个本地方法。",-1),H=n("p",null,"扩展：",-1),G=n("strong",null,"“加载”",-1),L=l(`<p><span style="color:red;background:yellow;"><strong>某个类的类加载在一次程序运行过程中，仅有一次。所以某个类的运行时类对象（Class对象）也必然是唯一的！！</strong></span>相对应的，不同类型的两个类，它们的Class对象必然是两个不同的独立对象。</p><p>以上特点是Class对象最重要的特点，表现在代码上就是：</p><p>同类型Class对象唯一</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> stuClazz <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> stuClazz2 <span class="token operator">=</span> s2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stuClazz <span class="token operator">==</span> stuClazz2<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),F=l(`<p>不同类型Class对象不同</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Student</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> stuClazz <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Teacher</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> teacherClazz <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>teacherClazz <span class="token operator">==</span> stuClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),Q=l(`<p>紧接第二条，在实际开发中，getClass()方法经常用于判断两个引用所指向的对象是否是同一个类型的对象。</p><p>参考以下方法：</p><p>判断两个对象的类型是否一致</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">judgeObjectType</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> o1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> o2<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>显然上述方法：</p><ol><li>如果返回true，表示o1和o2两个引用指向的对象，是同一种类型的对象。</li><li>如果返回false，表示o1和o2两个引用指向的对象，不是同一种类型的对象。</li></ol><p>特别强调：</p>`,7),R=l(`<h2 id="tostring方法" tabindex="-1"><a class="header-anchor" href="#tostring方法" aria-hidden="true">#</a> toString方法</h2><h3 id="方法的声明-1" tabindex="-1"><a class="header-anchor" href="#方法的声明-1" aria-hidden="true">#</a> 方法的声明</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>没有什么特别需要注意的地方，记住它有返回值，并且返回字符串String就可以了</p><h3 id="文档解释" tabindex="-1"><a class="header-anchor" href="#文档解释" aria-hidden="true">#</a> 文档解释</h3><p>关于<strong>toString()方法</strong>的作用，在官方JDK文档中，有详细的说明，主要是以下四点：</p>`,6),U=n("li",null,"返回该对象（调用toString方法的对象）的字符串表示。",-1),W=n("strong",null,"toString()方法",-1),X=n("strong",null,'"以文本方式表示"',-1),Y=n("li",null,"结果应是一个简明但易于读懂的信息表达式。",-1),Z=n("li",null,"建议所有子类都重写此方法。",-1),$=l(`<p>所以，<strong>toString()方法</strong>的作用非常简单，说白了，把对象转换成字符串，就和它的方法名一样。而且这个字符串要简洁明了，能够用来描述这个对象，而且最后一句话，已经表明了：Java设计者自己都觉得Object类当中的，<strong>toString()方法</strong>的默认实现不是一个最优解，子类可以根据自身情况选择重写它。</p><p>现在，我们先来看一看<strong>toString()方法</strong>在Object类当中的默认实现。</p><h3 id="tostring的默认实现" tabindex="-1"><a class="header-anchor" href="#tostring的默认实现" aria-hidden="true">#</a> toString的默认实现</h3><p><strong>toString()方法</strong>在Object类当中的代码实现，非常简单，如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;@&quot;</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法会返回一个字符串，这个字符串的组成是：</p>`,6),nn=n("strong",null,"getClass()方法",-1),an=n("strong",null,"getName()方法",-1),sn=n("p",null,"hashCode()方法也是Object类当中的成员方法，我们马上就会学习，这里先了解：",-1),en=n("p",null,"Object类当中，该方法的默认实现是通过计算对象的地址，转换成一个十进制的数字来实现的。",-1),tn=n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"所以Object类当中hashCode()方法的默认实现，一般认为它的返回值是该对象的十进制地址值。")])],-1),ln=n("p",null,"Integer.toHexString(int)方法虽然没学过，但很明显从方法名不难知道，该方法是将一个十进制整数转换成十六进制字符串",-1),on=n("p",null,"于是：",-1),pn=l('<p>以上，将内容全部连接起来，该方法的返回值字符串就是：</p><blockquote><p><span style="color:red;background:yellow;"><strong>全限定类名 + @ + 对象的十六进制地址值</strong></span></p></blockquote><p>这个结果我们再熟悉不过了，所以下面补充一下<strong>toString()方法</strong>的作用。</p><h3 id="作用-1" tabindex="-1"><a class="header-anchor" href="#作用-1" aria-hidden="true">#</a> 作用</h3><p>看到这里，你应该已经明白<strong>toString()方法</strong>的作用了：</p><p>在Java代码中，如果存在以下两种情况：</p>',6),cn=n("strong",null,"toString()方法",-1),un=l(`<p>toString()方法的结果又要分成两种情况：</p><ol><li>如果类中没有重写该方法，就会去使用Object类的默认实现。在之前，我们看到，打印对象名会打印地址值，就是这么来的。</li><li>而如果本类中重写了该方法，那自然会使用子类中的重写实现。</li></ol><p>参考以下代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// s是一个引用</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述作用弄明白了以后，很显然在多数时候，我们并不关心全限定类名和地址值，所以文档说明中推荐子类重写该方法。</p>`,5),rn=n("strong",null,"“返回对象的状态（成员变量的取值）”",-1),dn=l(`<p>参考下列代码：</p><p>toString方法的重写</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Student类中</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token keyword">return</span> <span class="token string">&quot;Student{&quot;</span> <span class="token operator">+</span>
      <span class="token string">&quot;s=&quot;</span> <span class="token operator">+</span> s <span class="token operator">+</span>
      <span class="token string">&quot;, id=&quot;</span> <span class="token operator">+</span> id <span class="token operator">+</span>
      <span class="token string">&quot;, age=&quot;</span> <span class="token operator">+</span> age <span class="token operator">+</span>
      <span class="token string">&quot;, score=&quot;</span> <span class="token operator">+</span> score <span class="token operator">+</span>
      <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),kn=n("strong",null,"toString()方法",-1),hn=n("h3",{id:"注意事项-1",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#注意事项-1","aria-hidden":"true"},"#"),a(" 注意事项")],-1),vn=n("p",null,"toString方法的使用，总体很简单，但我们还是要注意以下几个细节：",-1),gn=n("li",null,[n("p",null,[a("toString()方法可以快速自动生成，仍然使用IDEA快捷键"),n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"Alt + Insert")]),a("完成。")])],-1),bn=l(`<p>比如，业务代码，赋值代码等等。</p><p>尤其是，如果你在toString方法中写赋值或者其它语句，就会<span style="color:red;background:yellow;"><strong>导致Debug模式运行下，代码运行结果不正确，但正常run模式启动，结果正常的奇怪情况。</strong></span></p><p>比如下列代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Star</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Star</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">Star</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token string">&quot;Star{&quot;</span> <span class="token operator">+</span>
                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span>
                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>run模式启动程序：控制台打印李四</p><p>Debug模式启动程序：控制台打印张三</p><p>这是因为IDEA的Debug模式下，当代码执行完阴影行，会自动调用该类的toString()方法，在图形界面上展示该对象信息。</p><p>参考下图：</p><img src="https://hixiaodong123.oss-cn-hangzhou.aliyuncs.com/typora/202208100933236.png?align=center&amp;padding=true" alt="image-20220810093300065" style="zoom:67%;">`,9),mn=n("strong",null,"打印对象名或对象名拼接字符串中",-1),_n=n("strong",null,"隐含调用的toString方法",-1),fn=n("p",null,"因为隐式调用不会空指针异常，但直接调用方法完全可能出现空指针异常。",-1),yn=n("li",null,[n("p",null,"如果类中有（自定义）引用数据类型成员变量，也需要重写它的toString方法，不然就会打印地址值了。")],-1),qn=l(`<h2 id="equals方法" tabindex="-1"><a class="header-anchor" href="#equals方法" aria-hidden="true">#</a> equals方法</h2><h3 id="方法的声明-2" tabindex="-1"><a class="header-anchor" href="#方法的声明-2" aria-hidden="true">#</a> 方法的声明</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>仅需要注意两点：</p><ol><li>该方法是有参数的，需要传入一个对象（任意一个对象就行）</li><li>方法是有返回值的，返回一个布尔类型的值，真或假。</li></ol><h3 id="作用-2" tabindex="-1"><a class="header-anchor" href="#作用-2" aria-hidden="true">#</a> 作用</h3><p>equals有相同，相等的意思。**所以该方法的作用是，用于指示其他某个对象是否与此对象&quot;相等&quot;。**此对象即调用该equals方法的对象，其它对象即方法实参传入的对象。</p><p>既然是比较对象相等，那自然就需要比较的规则才有意义，比较的规则其实就是方法体中的代码，我们先来看一下Object类当中，默认的比较规则，即equals方法的默认实现。</p><h4 id="equals默认实现" tabindex="-1"><a class="header-anchor" href="#equals默认实现" aria-hidden="true">#</a> equals默认实现</h4><p>Object类当中的equals方法默认实现，认为的对象相等的比较规则：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>很显然，这个比较规则非常简单。双等号直接连接引用，比较对象的地址，换句话说是比较两个引用是否指向同一个对象。这个相等的规则就非常苛刻了：</p><ul><li>只有当两个引用完全指向同一个对象时，方法才会返回true，否则都会返回false。</li></ul><p>换句话说，<span style="color:red;background:yellow;"><strong>Object类当中的equals方法默认实现，仅自己和自己比较时，才会返回true。</strong></span>在多数情况下，我们不需要这样一个苛刻的规则，所以需要自己重写equals方法的实现。</p><h4 id="重写equals方法的注意事项" tabindex="-1"><a class="header-anchor" href="#重写equals方法的注意事项" aria-hidden="true">#</a> 重写equals方法的注意事项</h4><p>既然需要重写equals方法，就需要一个重写的规则，我们认为的对象相等的规则：</p><ol><li>如果不是相同类型的对象，没有可比性，直接认定为不相等。getClass()方法获取其类型</li><li>如果是相同类型的对象，行为是一致的，只有成员变量的取值有差异。所以只要，这两个对象的成员变量的取值（对象的状态）是一致时，就认定这两个对象相等。</li></ol><p>对于以上比较规则的equals方法的重写，Java官方为我们提供了官方的要求，称之为equals方法重写的常规协定：</p><ol><li>自反性：对于任何非空引用值 x，x.equals(x)都应返回 true</li><li>对称性：对于任何非空引用值 x 和 y，当且仅当y.equals(x) 返回 true 时，x.equals(y) 才应返回true</li><li>传递性：对于任何非空引用值 x、y 和 z，如果x.equals(y)返回 true，并且 y.equals(z) 返回 true，那么x.equals(z) 应返回 true。</li><li>一致性：对于任何非空引用值 x 和 y，多次调用 x.equals(y)始终返回 true 或始终返回 false。</li><li>排他性：当比对的不是同种类型的对象或者是一个null时，默认返回false</li></ol><p>以上5点常规协定， <span style="color:red;background:yellow;"><strong>其中自反性和排它性需要写代码做判断，而对称性，一致性，传递性，只需要用成员变量的取值来判断对象相等，就自动满足它们。</strong></span></p><p>按照以上规则重写equals方法，就完成了我们的比较规则，两个相同类型的对象成员变量取值完全一致时，它们就是相等的。</p><h3 id="重写equals方法的注意事项-1" tabindex="-1"><a class="header-anchor" href="#重写equals方法的注意事项-1" aria-hidden="true">#</a> 重写equals方法的注意事项</h3><ol><li><p>在实现排他性时，实际上有两种选择：</p><ol><li><p>使用getClass方法比较。 这个比较是比较苛刻的，只有在完全是同一个类型时才会返回true</p></li><li><p>使用instanceof比较。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>引用 <span class="token keyword">instanceof</span> 类名
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>表示判断引用所指向的对象的具体类型，是否是后面类名的对象或者子类对象，如果是就返回true，如果不是就返回false。</p><p>这个比较的条件就比较宽松了，可以允许传入子类对象。（当子类对象的父类成员和父类对象相同时,equals方法仍然返回true）</p></li></ol></li><li><p>equals方法也是可以用快捷键自动生成的，使用快捷键alt + insert。而且可以选择在实现排它性时的方式。</p></li><li><p>浮点数比较特殊，它具有规格化和非规格化的区别，还有非数(NaN)，无穷大，无穷小很多特殊的概念，正常情况下，如果仅仅比较数值，用==比较相等是够用的。但为了避免因浮点数特殊值，而出现的错误。实际开发中，从严谨角度出发，浮点数的比较仍然建议使用，对应包装类型的compare方法去比较浮点数的大小：</p><ol><li>Float.compare(float a,float b)</li><li>Double.compare(double a,doublet b)</li></ol><p>这两个方法在,a &lt; b时返回-1(负数)，在a&gt;b时，返回1(正数)，只有在两个浮点数相等时，才会返回0</p></li><li><p>如果类中有引用数据类型成员变量，需要去调用它们的equals方法完成比较。这就意味着还需要重写这个类的equals方法。</p></li><li><p>财务金额上的运算是不推荐使用浮点数的，会出现精度问题。推荐使用BigDecimal这个类完成运算。</p></li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>构造方法:
BigDecimal(String val)
将 BigDecimal 的字符串表示形式转换为 BigDecimal。

成员方法:
减法
BigDecimal subtract(BigDecimal subtrahend)
加法:
BigDecimal add(BigDecimal augend)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="hashcode方法" tabindex="-1"><a class="header-anchor" href="#hashcode方法" aria-hidden="true">#</a> hashCode方法</h2><h3 id="方法的声明-3" tabindex="-1"><a class="header-anchor" href="#方法的声明-3" aria-hidden="true">#</a> 方法的声明</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>很显然，它是一个本地方法，这个方法也没有任何参数，返回值是一个int类型整数。</p><h3 id="方法的作用" tabindex="-1"><a class="header-anchor" href="#方法的作用" aria-hidden="true">#</a> 方法的作用</h3><ol><li>返回该对象的哈希码值。</li><li>支持此方法是为了提高哈希表（例如 java.util.Hashtable 提供的哈希表）的性能。</li></ol><p>关于哈希表、哈希码值等相关的概念，如果你对数据结构这门课程有些了解，那么这些概念就是非常容易的。当然如果你还不太明白，就看一下下面的说明。</p><h4 id="哈希的概念" tabindex="-1"><a class="header-anchor" href="#哈希的概念" aria-hidden="true">#</a> 哈希的概念</h4><p>映射的概念：</p><blockquote><p>设A和B是两个非空集合，并存在某种对应关系f</p><p>按照这种对应关系f，对于集合A中的任何一个元素a，在集合B中都存在唯一的一个元素素b与之对应</p><p>那么，这样的对应（包括集合A，B，以及集合A到集合B的对应关系f）叫做集合A到集合B的映射</p></blockquote><p>如果用图描述的话，就是下图：</p><img src="https://hixiaodong123.oss-cn-hangzhou.aliyuncs.com/typora/202201121211877.png?align=center" alt="映射图解" style="zoom:33%;"><p>注意：</p><ol><li>我们数学中学习的函数，其实是一种特殊的映射。（函数只不过是集合A、B是数集的映射罢了）</li><li><span style="color:red;background:yellow;"><strong>映射不要求元素一一对应，允许出现多对一，但绝不允许一对多。</strong></span></li></ol><hr><p>明白映射的概念后，哈希映射就不难理解了。哈希映射也是一种特殊的映射，要求：</p><ol><li>集合A必须是一个无限大小，具有无穷多元素的集合。</li><li>集合B必须是一个元素有限的集合。</li></ol><p>化无限为有限，这就是哈希映射。</p><p>在哈希映射当中，集合A和B之间的对应关系f，就是一种映射的规则，称之为哈希函数、哈希方法或者哈希算法等。</p><p>而通过哈希算法，求得的集合B中的元素，称之为哈希值。</p><p>化无限为有限，这本身就是不现实的，更不可能强求映射是完全一一对应的。所以在哈希映射中，出现多对一是相当正常的，称之为&quot;哈希冲突&quot;。</p><hr><p>在Java当中，hashCode方法可以看成是哈希映射的一个算法，也就是映射中的对应关系f，该方法的作用是：</p><ol><li><span style="color:red;background:yellow;"><strong>将一个无限大小的集合（某个类的对象的集合）映射到一个有限大小的集合（int整数）上。</strong></span></li><li><span style="color:red;background:yellow;"><strong>方法返回的一个int整数，这个整数就是该对象的哈希值。</strong></span></li></ol><p>现在你已经大概知道，什么是哈希映射，什么是哈希值了。那么再回到JDK当中的方法说明上：</p><ol><li>返回该对象的哈希码值。</li><li>支持此方法是为了提高哈希表（例如 java.util.Hashtable 提供的哈希表）的性能。</li></ol><h4 id="哈希表" tabindex="-1"><a class="header-anchor" href="#哈希表" aria-hidden="true">#</a> 哈希表</h4><p>哈希表的详细概念，后面在数据结构章节中，老师会详细讲解，这里我们可以先简单了解一下。</p>`,52),jn={href:"https://zhuanlan.zhihu.com/p/107326081",target:"_blank",rel:"noopener noreferrer"},Cn={href:"https://zhuanlan.zhihu.com/p/144296454",target:"_blank",rel:"noopener noreferrer"},wn=n("p",null,'哈希表（也叫散列表）可以简单看成是一种存储键值对Key-Value的数据结构，在实际开发中非常常见。比如用户登陆的"用户名——密码"就是典型的键值对。哈希表的实现，本质还是一个数组，哈希表具有数组访问快的特点，还能存储键值对数据。',-1),xn=n("p",null,"Java当中的哈希表实现，Key和Value都必须是一个对象，通过调用类中的hashCode方法计算Key（哈希表中Key是唯一的）对象的哈希值，决定这个键值对在数组中的存储位置（也就是存储元素的数组下标）。而如果出现哈希冲突：表示它们在数组中的存储位置一样，这时总不可能让数组一个位置存两个元素。常见的做法就是采用链表将它们挂在数组下面，然后每个节点都存储下一个节点的地址（引用）。Java中的哈希表的实现，大致就如下图所示：",-1),Sn=n("img",{src:"https://hixiaodong123.oss-cn-hangzhou.aliyuncs.com/typora/202201112124550.png?align=center",alt:"Java哈希表的实现",style:{zoom:"33%"}},null,-1),On=n("p",null,'将Key-Value数据按照上述结构存储后，我们就可以通过Key获取哈希值，首先找到数组的下标，然后如果存在哈希冲突，数据被"挂"在链表中了，就还需要遍历链表，逐一比对Key，找到我想要访问的键值对数据。',-1),zn=l(`<h3 id="默认实现" tabindex="-1"><a class="header-anchor" href="#默认实现" aria-hidden="true">#</a> 默认实现</h3><p>Object默认的hashCode方法，是一个本地方法，我们没办法直接看代码分析方法的实现。在JDK文档中，是这么描述的（原话）：</p><blockquote><p>实际上，由 Object 类定义的 hashCode 方法确实会针对不同的对象返回不同的整数。（这一般是通过将该对象的内部地址转换成一个int整数来实现的，但是 Java 编程语言不需要这种实现技巧。）</p></blockquote><p>这说明什么呢？默认情况下，哈希值是通过计算对象的地址值来获取的。<strong>这样的话，一般两个独立的对象的哈希值是不同的，而同一个对象（用两个引用调用方法）它们的哈希值必然是相同的。</strong></p><h3 id="方法的重写" tabindex="-1"><a class="header-anchor" href="#方法的重写" aria-hidden="true">#</a> 方法的重写</h3><p>在很多时候，我们都需要重写hashCode方法，JDK文档中给我们标注了重写的规则和什么时候进行重写，如下：</p><ol><li>在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数，前提是将对象进行 equals比较时所用的信息没有被修改。</li><li>如果根据 equals(Object)方法，两个对象是相等的，那么对这两个对象中的每个对象调用hashCode方法都必须生成相同的整数结果。</li><li>如果根据 equals(java.lang.Object)方法，两个对象不相等，那么对这两个对象中的任一对象上调用hashCode方法不要求一定生成不同的整数结果。但是，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。</li></ol><p>上述三条，告诉了我们：</p><ol><li>hashCode方法和equals方法是息息相关的，要重写必须一起重写。 <ol><li>一起重写后，必须符合equals方法返回true，那么这两个对象的哈希值必须相同的规则。</li><li>这是因为equals是判断对象相等的，对象相等后，就相当于是上述映射定义中，集合A中的同一个元素，那么它们哈希映射的结果必然相同。这是映射定义强制要求的。</li><li>哈希冲突是允许存在（不允许也不可能）的，但是我们要清楚，设计出更好的哈希算法，尽量避免哈希冲突，可以提升哈希表性能。</li></ol></li></ol><p>最后，还是要强调一下，hashCode方法和equals方法要重写必须一起重写，而且重写的依据必须是一样的，这样才能保证两个方法的结果具有一致性。<span style="color:red;background:yellow;"><strong>比如一个Student类，如果equals方法依据其中的成员变量age和name重写的，那么hashCode方法也必须要依赖于这两个成员变量重写！！</strong></span></p><h4 id="如何重写" tabindex="-1"><a class="header-anchor" href="#如何重写" aria-hidden="true">#</a> 如何重写</h4><p>知道重写的原则后，就是具体算法的设计了，这个就主要靠自己开动脑筋了。好在IDEA知道程序员们都不愿动脑筋，IDEA也给hashCode方法的重写提供快速生成，即使用快捷键Alt + Insert。</p><p>按下快捷键选择重写hashCode方法后，会要求你选择重写依据的成员变量，这时要注意，<span style="color:red;background:yellow;"><strong>一定要保持和equals方法一致的重写依据。</strong></span></p><p>具体代码这里不再贴出，实际开发中，如无特殊需求，使用IDEA自动生成的哈希算法，足够了。有特殊需求，再说。</p><h4 id="为什么要同时重写hashcode和equals方法" tabindex="-1"><a class="header-anchor" href="#为什么要同时重写hashcode和equals方法" aria-hidden="true">#</a> 为什么要同时重写hashCode和equals方法</h4><p>首先hashCode方法中规定：</p><ol><li><strong>两个对象相等，哈希值一定相等。</strong></li><li><strong>两个对象不相等，哈希值不要求完全不相等。</strong></li></ol><p>那么这里就很明显存在一个问题：</p><p>如何判断对象相等？答：依赖类中的equals方法！</p><p>对于下列代码：</p><p>举例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Studnet类存在String name和int age的双参构造器</span>
<span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Student</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">&quot;小明&quot;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>假如只重写了Student类的equals方法，没有重写hashCode方法，那么：</p><p><strong>s1对象明明和s2对象相等，但哈希值却不相等。（因为默认的hashCode方法按照对象地址计算）</strong></p><p>这严重违背原则！</p></li><li><p>假如只重写了Student类的hashCode方法，没有重写equals方法，那么：</p><p><strong>s1对象明明和s2对象不相等，但哈希值却一定相等。</strong></p><p>这也不符合原则！</p></li></ol><h3 id="注意事项-2" tabindex="-1"><a class="header-anchor" href="#注意事项-2" aria-hidden="true">#</a> 注意事项</h3><ol><li>一旦重写hashCode方法后，默认的toString方法就不会再打印地址值了。这是因为toString方法，默认调用的是本地方法的hashCode方法获取地址值，重写后不再是地址值了。</li><li>如果类中有引用数据类型成员变量，那么就继续调用它的hashCode方法，也就需要重写它的hashCode方法。</li></ol><h2 id="finalize方法-了解" tabindex="-1"><a class="header-anchor" href="#finalize方法-了解" aria-hidden="true">#</a> finalize方法(了解)</h2><h3 id="方法的声明-4" tabindex="-1"><a class="header-anchor" href="#方法的声明-4" aria-hidden="true">#</a> 方法的声明</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>首先注意访问权限是protected，这说明在不重写访问权限的情况下，仅能够在自身类中创建自身对象，才能调用这个方法。</p><p>其次它的方法体是空的，功能没有实现，这种设计的目的是为了让子类自己去重写该方法的实现。这种做法比起抽象方法的强制子类实现，要更加灵活，而且可以用在普通类中。</p><p>最后，它的方法声明中有一个<code>throws Throwable</code>， 这是方法抛出异常列表的声明，现在不用管它，后面会讲。</p><h3 id="方法的作用-1" tabindex="-1"><a class="header-anchor" href="#方法的作用-1" aria-hidden="true">#</a> 方法的作用</h3><blockquote><p>finalize方法是Java沿用的C++中的析构函数的设计。</p><p>在C++当中，负责对象的生命周期的，有两个函数：</p><ol><li>构造函数，用来在对象**&quot;出生&quot;**时，给成员变量赋值，在Java当中对应构造器。</li><li>析构函数，用来在对象销毁时，给对象的死亡做&quot;善后&quot;工作，在Java中就对应<code> finalize方法</code>。</li></ol><p>所以要搞明白finalize方法的作用，就要搞清楚析构函数的作用，理解何为对象死亡的&quot;善后&quot;工作。</p></blockquote><h3 id="对象资源占用的情况" tabindex="-1"><a class="header-anchor" href="#对象资源占用的情况" aria-hidden="true">#</a> 对象资源占用的情况</h3><p>无论是Java还是C++中，一个对象在内存中都普遍占用两种资源：</p><ol><li><p>对象在内存中存在，本身就是要占用内存的，这个内存在对象销毁时就会随之释放。这个释放的过程在不同的语言当中，形式是不同的，比如C++是程序员手动释放的，Java依赖是GC自动完成释放。但不管是什么形式，这些对象所占用的内存都是可以准确释放的。</p></li><li><p>对象在存在时，很多时候不仅自身要占用内存，还可以需要去使用一些系统资源，占用一些系统资源，比如：</p><ol><li>做I/O操作时，需要占用系统的I/O资源。</li><li>做网络操作，要占用网络资源。</li><li>...</li></ol><p>那么这些系统资源，在对象使用后，也要被释放掉，不然就会一直被占用，可能就会产生问题。</p><p>C++当中的析构函数就是完成这个功能的。程序员将释放资源的语句写进析构函数中，在对象销毁时，该函数自动被调用，自动去释放对象占用的系统资源。</p></li></ol><hr><p><strong>Java当中的finalize方法就是&quot;模仿&quot;析构函数设计的，finalize方法也会在对象销毁时自动被调用，我们Java程序员只需要把释放资源的代码放在finalize方法中，就可以完成对象销毁的&quot;善后&quot;工作。</strong></p><p>理想是很美好的，因为有这个finalize方法后，Java的资源释放代码，就可以统一地写进一个方法中，还会自动调用，多么方便的一种设计啊。</p><p>可惜现实是很骨感的，实际上根本达不成这种目的。</p><p>这里就体现了<code>Java GC</code>自动垃圾回收的缺点：程序员缺乏对对象销毁的控制，对象的垃圾回收具有不确定性，没有时效性。**那么连带着finalize方法的执行也是不确定的。**在这段不确定长度的时间里，对象其实早就已经没用了，但系统资源还是一直被占用着，造成资源的浪费。 <span style="color:red;background:yellow;"><strong>显然释放系统资源这么一件重要的事情，不能依赖于一个不稳定的机制。</strong></span></p><p>从Java9开始，Java官方正式将该方法标记为<code>@Deprecated</code>，表示这个方法已经被放弃使用了。</p><h3 id="测试finalize方法" tabindex="-1"><a class="header-anchor" href="#测试finalize方法" aria-hidden="true">#</a> 测试finalize方法</h3><p>如果你仍然感兴趣finalize方法，为什么不靠谱。这里给出一个测试代码，感兴趣自己玩一下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>
 <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   	<span class="token comment">// 匿名对象,理论上很快成为垃圾对象</span>
     <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">// 通知GC进行垃圾回收</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>
 <span class="token annotation punctuation">@Override</span>
 <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;模拟释放资源&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码执行，你就会发现<code>模拟释放资源</code>一会打印了，说明方法执行了；一会又不打印，说明方法没有调用。这种不靠谱的机制，是不可能真的用来做资源释放的。</p><p><span style="color:red;background:yellow;"><strong>在Java中，所有的资源释放，都必须依赖程序员手动完成，所以以后大家做I/O操作，网络操作，数据库操作等需要占用系统资源的操作时，一定不要忘记在用完后，释放系统资源！</strong></span></p><h2 id="clone方法" tabindex="-1"><a class="header-anchor" href="#clone方法" aria-hidden="true">#</a> clone方法</h2><h3 id="方法的声明-5" tabindex="-1"><a class="header-anchor" href="#方法的声明-5" aria-hidden="true">#</a> 方法的声明</h3><p>clone方法的方法声明为：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">native</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里需要注意的地方有：</p>`,52),Jn=n("p",null,"首先注意访问权限，它的访问权限是protected。这意味着：",-1),In=n("li",null,"一般来说，只能在子类当中，创建子类自身对象才能够调用该方法（方法调用位置，肯定不是同包）。",-1),An=n("li",null,[n("p",null,"它是一个本地native方法，没有方法体。（依赖本地方法实现创建对象，不同于new对象）")],-1),Dn=n("p",null,"返回值类型是Object。",-1),Bn=n("li",null,[n("p",null,[n("strong",null,"throws CloneNotSupportedException"),a("是方法抛出异常的声明，这里我们先不管，后面异常的章节会讲解。")])],-1),En=l('<h3 id="方法的作用-2" tabindex="-1"><a class="header-anchor" href="#方法的作用-2" aria-hidden="true">#</a> 方法的作用</h3><p>这个方法的名字，其实已经很明显的告诉了你它的作用：</p><p>克隆，生物学意义上的克隆，是用生物的体细胞，经过无性繁殖，得到相同基因型后代的过程。</p><p>Java当中的**克隆方法clone()**有类似的作用，当你在程序中有这种需求，即希望：</p><ol><li>得到一个和原先对象，完全独立的新对象。</li><li>成员仍和原先对象一致。</li></ol><p>有这种做法时，普通的做法就是再new一个一模一样的，但学习clone方法后，你就可以用该方法来做这个事情了。</p><p><span style="color:red;background:yellow;"><strong>所以Object类当中的clone方法默认实现，就是得到一个独立的，和原先对象成员一致的新对象。</strong></span></p><h3 id="方法使用步骤" tabindex="-1"><a class="header-anchor" href="#方法使用步骤" aria-hidden="true">#</a> 方法使用步骤</h3><p>现在，我们已经知道clone方法的作用了，那么怎么使用这个方法呢？</p><p>直接调用的话，肯定是有些问题的，这里我们就来研究一下clone方法的使用步骤：</p>',10),Pn=n("p",null,"第一步，首先就要解决的就是访问权限的问题。",-1),Kn=n("p",null,'在默认的情况下，只能在子类中自己"克隆"自己，这种需求还是很少见的。',-1),Vn=n("strong",null,"就需要在该类中重写clone方法的访问权限。",-1),Nn=n("li",null,[n("p",null,"第二步，可以选择重写方法的返回值类型，从Object改为自身类型。"),n("p",null,"很显然Object当中的克隆方法的默认实现，只会得到一个一模一样且独立的对象，肯定不可能改变对象的类型。"),n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"这一步不是必须的，但推荐做一下。")])]),n("p",null,"注：方法体在多数情况下，我们使用Object默认实现就够了，不要重写它。")],-1),Tn=n("strong",null,"java.lang.Cloneable",-1),Mn=n("strong",null,"java.lang.Cloneable",-1),Hn=n("strong",null,"CloneNotSupportedException",-1),Gn=n("p",null,[n("span",{style:{color:"red",background:"yellow"}},[n("strong",null,"一个类实现了接口java.lang.Cloneable，是一个类能够调用clone方法的标志。")])],-1),Ln=n("li",null,[n("p",null,"完成以上三步，就可以在需要的地方去完成一个对象的克隆了。")],-1),Fn=l(`<h3 id="克隆使用中的细节问题" tabindex="-1"><a class="header-anchor" href="#克隆使用中的细节问题" aria-hidden="true">#</a> 克隆使用中的细节问题</h3><h4 id="cloneable接口" tabindex="-1"><a class="header-anchor" href="#cloneable接口" aria-hidden="true">#</a> Cloneable接口</h4><p>​ 一般情况下，因为接口中往往有抽象方法，某个普通类实现一个接口往往会报错，会要求该类必须实现抽象方法。</p><p>但是某个类实现接口<code>java.lang.Cloneable</code>却不会报错，这是因为这个接口并没有抽象方法。实际上当你查看源码时就会发现：</p><p><span style="color:red;background:yellow;"><strong>Cloneable接口是一个空接口，里面没有任何内容。</strong></span></p><p>那么让类去实现一个空接口，有什么意义呢？</p><p>实现空接口虽然没有得到任何成员，但这个类的数据类型就发生了一些变化。</p><p>让这个类从原先不是这个接口的子类，变成了接口的子类。一旦成为接口的子类，就可以使用<code>instanceof</code>关键字进行类型的判断，判断到底是否该接口。</p><p>从而就可以根据不同的情况，做出不同的处理。比如下列代码，Cloneable接口的底层也是这么判断的：</p><p>空接口的作用</p><div class="language-Java line-numbers-mode" data-ext="Java"><pre class="language-Java"><code>public class Demo {
public static void main(String[] args) {
  judgeInstanceImplEmptyInter(new A());
}
//用于判断传入的对象是否是接口的子类对象
public static void judgeInstanceImplEmptyInter(Object o) {
  if (o instanceof EmptyInterface) {
      System.out.println(&quot;实现了空接口,可以做一些操作&quot;);
      return;
  }
  System.out.println(&quot;没有实现空接口,抛出异常&quot;);
}
}
interface EmptyInterface {
}
class A implements EmptyInterface {
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码中，由于A已经实现了接口，所以<code>instanceof</code>的结果就是true。程序会输出：</p><blockquote><p>实现了空接口,可以做一些操作</p></blockquote><p><span style="color:red;background:yellow;"><strong>像Cloneable这种没有声明定义任何成员的，一个空接口，它其实就起到一个标记的作用，称之为&quot;标记接口&quot;。</strong></span></p><p>被Cloneable标记的类是允许做克隆操作的，反之不允许。JDK中的标记接口，我们在后面还会见到。</p><h4 id="创建对象的方式" tabindex="-1"><a class="header-anchor" href="#创建对象的方式" aria-hidden="true">#</a> 创建对象的方式</h4><p>clone方法是一种新的创建对象的方式，和new对象的方式是平行的关系，是独立的关系。</p><p><span style="color:red;background:yellow;"><strong>调用clone方法得到对象的过程，是依赖于本地方法实现的，不会去调用构造器。</strong></span></p><h4 id="方法体的重写" tabindex="-1"><a class="header-anchor" href="#方法体的重写" aria-hidden="true">#</a> 方法体的重写</h4><p>上面我们已经说过了，在进行克隆操作时，正常情况下，我们使用Object类当中的默实现就足够了，不需要重写实现。但假如你真的有需求，对于某个对象的引用<code>x</code>，JDK文档中也规定了一些重写的原则：</p><blockquote><ol><li>x.clone() != x 为 true</li><li>x.clone().getClass() == x.getClass() 一般也为true</li><li>x.clone().equals(x) 一般情况下也为true</li></ol></blockquote><p>上述规定告诉我们：</p><ol><li>克隆必须是一个新的独立的对象</li><li>克隆最好不要改变数据类型，除非你真的有需要。</li><li>克隆后的两个对象调用equals方法，应该返回true。前提是，必须按照成员变量的取值重写equals方法。</li></ol><h4 id="深度克隆" tabindex="-1"><a class="header-anchor" href="#深度克隆" aria-hidden="true">#</a> 深度克隆</h4><p>如果类中有引用数据类型的成员变量，那么clone方法的使用就要格外注意了：</p><ol><li>Java当中，Object类的clone方法的默认实现是完全直接拷贝一份成员变量。 <ol><li>对于基本数据类型的成员变量来说，没有任何问题，直接拷贝值。</li><li>但对于引用数据类型而言，拷贝的是引用。这意味着克隆后的引用和原先的引用指向同一个对象。</li></ol></li><li>这样的话，使用任何一个引用去修改对象的状态，都会互相影响，<strong>这样的两个对象就不是完全独立的了。</strong></li></ol><p>像以上Object类当中的clone方法的实现，直接拷贝一份成员变量，不管引用数据类型成员变量引用，所指向的对象。</p><p>我们称之为&quot;浅克隆&quot;。</p><p><span style="color:red;background:yellow;"><strong>对应的，如果能够让引用数据类型成员变量之间也能相互独立，克隆后获取真正独立的两个对象。我们称之为&quot;深度克隆&quot;。</strong></span></p><p>深度克隆怎么做呢？</p><p>其实非常简单，浅克隆之所以两个对象没有真正独立，是因为拷贝引用和原先的引用指向了同一个对象，现在只需要：</p><ol><li>将引用指向的对象，也克隆一份。</li><li>然后让克隆后的引用指向它。</li></ol><p>参考下图：</p><img src="https://hixiaodong123.oss-cn-hangzhou.aliyuncs.com/typora/202201120159531.png?align=center" alt="深度克隆" style="zoom:33%;"><p>当然，这个过程中，需要在类中重写clone方法，参考代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//重写clone方法的访问权限</span>
 <span class="token annotation punctuation">@Override</span>
 <span class="token keyword">public</span> <span class="token class-name">Student</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">{</span>
     <span class="token comment">//仍然选择调用父类默认实现</span>
     <span class="token comment">//深度克隆的步骤</span>
     <span class="token comment">//1.深度克隆是在浅克隆基础上玩的</span>
     <span class="token class-name">Student</span> cloneStu <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//2.需要把Dog对象克隆一份</span>
     <span class="token class-name">Dog</span> cloneDog <span class="token operator">=</span> cloneStu<span class="token punctuation">.</span>d<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token comment">//3.将拷贝引用指向拷贝对象</span>
     cloneStu<span class="token punctuation">.</span>d <span class="token operator">=</span> cloneDog<span class="token punctuation">;</span>
     <span class="token keyword">return</span> cloneStu<span class="token punctuation">;</span>
     <span class="token comment">//return ((Student) super.clone());</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36);function Qn(Rn,Un){const e=p("font"),o=p("ExternalLinkIcon");return i(),u("div",null,[d,n("p",null,[a("这里所谓的"),s(e,{color:"red"},{default:t(()=>[k]),_:1}),a("，在前面的章节中已经说过了：")]),n("p",null,[a("此接口并不是Java语法中的"),s(e,{color:"red"},{default:t(()=>[h]),_:1}),a("，而是"),s(e,{color:"red"},{default:t(()=>[v]),_:1})]),g,n("p",null,[a("这就是API的意义所在，而实际上，在相当多的开发场景中，程序员只需要充分利用这些API就足以完成开发需求。所以很多中低级程序员，都被戏称为"),s(e,{color:"red"},{default:t(()=>[b]),_:1}),a("。")]),m,_,f,y,q,n("p",null,[a("自定义类时，我们并不需要特别的标注"),s(e,{color:"red"},{default:t(()=>[j]),_:1}),a("，这是一个隐式的继承。")]),n("p",null,[a("如果一个类没有明确的指出它的父类是谁，那么Object类就默认是这个类的"),s(e,{color:"red"},{default:t(()=>[C]),_:1}),a("。")]),w,n("ol",null,[n("li",null,[s(e,{color:"red"},{default:t(()=>[a("**getClass()方法**")]),_:1}),a("，是Java反射的前置知识点，该方法本身作用不大，仅作了解。")]),n("li",null,[s(e,{color:"red"},{default:t(()=>[a("**toString()方法**")]),_:1}),a("，提供了将对象字符串化的方式，很简单但很常用，很重要的一个方法。")]),x]),S,n("ol",null,[O,z,J,n("li",null,[n("p",null,[I,a("是返回值类型，表示该方法需要返回一个"),s(e,{color:"red"},{default:t(()=>[A]),_:1}),a("。")]),n("blockquote",null,[n("p",null,[a("上述"),s(e,{color:"red"},{default:t(()=>[D]),_:1}),a("表示泛型，关于泛型后面会详细讲。")])])])]),B,n("p",null,[a("通过该方法的方法名，其实不难知道该方法的作用："),s(e,{color:"red"},{default:t(()=>[E]),_:1})]),P,n("ol",null,[n("li",null,[s(e,{color:"red"},{default:t(()=>[a("**什么是Class对象呢？**")]),_:1})]),n("li",null,[s(e,{color:"red"},{default:t(()=>[a("**对应的Class类是什么？它又有什么作用？**")]),_:1})])]),K,n("ol",null,[n("li",null,[V,n("blockquote",null,[N,T,M,H,n("p",null,[a("更具体来说，Class对象的创建，是在某个类类加载的"),s(e,{color:"red"},{default:t(()=>[G]),_:1}),a("时期。")])])]),n("li",null,[L,s(e,{color:"red"},{default:t(()=>[a("**结果是：true**")]),_:1}),F,s(e,{color:"red"},{default:t(()=>[a("**结果是：false**")]),_:1})]),n("li",null,[Q,s(e,{color:"red"},{default:t(()=>[a("**如果用getClass()方法来判断类型，是非常严格的，必须完全是同一个类型。**")]),_:1}),a("而像继承父子关系，都无需考虑。")])]),R,n("ol",null,[U,n("li",null,[a("通常，"),W,a("会返回一个"),s(e,{color:"red"},{default:t(()=>[X]),_:1}),a("此对象的字符串。")]),Y,Z]),$,n("ol",null,[n("li",null,[n("p",null,[a("用当前对象调用"),s(e,{color:"red"},{default:t(()=>[nn]),_:1}),a("，获取运行时类对象后，直接调用"),s(e,{color:"red"},{default:t(()=>[an]),_:1}),a("，获取该类型的全限定类名。")])]),n("li",null,[sn,en,tn,ln,on,s(e,{color:"red"},{default:t(()=>[a("**Integer.toHexString(hashCode())**")]),_:1}),a("整体表示的字符串就是：该对象的十六进制地址值。")])]),pn,n("ol",null,[n("li",null,[s(e,{color:"red"},{default:t(()=>[a("**直接打印一个对象名（引用）**")]),_:1})]),n("li",null,[s(e,{color:"red"},{default:t(()=>[a("**对象名（引用）参与字符串拼接**")]),_:1})])]),n("p",null,[a("这时就会隐式调用该对象的"),s(e,{color:"red"},{default:t(()=>[cn]),_:1}),a("，打印（或拼接）该toString()方法的返回值。")]),un,n("p",null,[a("重写没有固定的标准格式，一般来说，我们会以"),s(e,{color:"red"},{default:t(()=>[rn]),_:1}),a("作为该方法的重写实现。")]),dn,n("p",null,[a("这样，我们再去打印对象名，或者用对象名拼接字符串，看到的就不再是地址值了，而是我们重写后"),s(e,{color:"red"},{default:t(()=>[kn]),_:1}),a("的执行结果。")]),hn,vn,n("ol",null,[gn,n("li",null,[s(e,{color:"red"},{default:t(()=>[a("**toString()方法，普遍来说就是为了完成打印成员变量取值的，不要在里面写一些奇怪的代码。**")]),_:1}),bn]),n("li",null,[n("p",null,[a("为了避免空指针异常，"),s(e,{color:"red"},{default:t(()=>[mn]),_:1}),a("的"),_n,a("能不写出来就不要写出来，不要画蛇添足。")]),fn]),yn]),qn,n("p",null,[n("a",jn,[a("什么是哈希表？ - 知乎 (zhihu.com)"),s(o)])]),n("p",null,[n("a",Cn,[a("图文并茂详解数据结构之哈希表 - 知乎 (zhihu.com)"),s(o)])]),wn,xn,Sn,On,s(e,{color:"red"},{default:t(()=>[a("**显然，在哈希表中，哈希冲突越少越好，冲突少了，存得也快，取得更快，哈希表的性能就能提升。**")]),_:1}),a("所以Java当中hashCode方法（哈希算法）的实现，是很重要的。接下来，我们来首先看一下Object类当中，它的默认实现。"),zn,n("ol",null,[n("li",null,[Jn,n("ol",null,[In,n("li",null,[s(e,{color:"red"},{default:t(()=>[a("**让一个类自身克隆自身，一般都没有多大意义，所以建议在子类中重写方法访问权限。**")]),_:1})])])]),An,n("li",null,[Dn,n("blockquote",null,[s(e,{color:"red"},{default:t(()=>[a("**这里，也建议在子类方法中重写这个返回值类型。**")]),_:1})])]),Bn]),En,n("ol",null,[n("li",null,[Pn,Kn,n("p",null,[a("所以为了能够在类的外部调用该类的clone方法，"),s(e,{color:"red"},{default:t(()=>[Vn]),_:1})])]),Nn,n("li",null,[n("p",null,[a("第三步，一个类想要做克隆操作，必须要先实现一个接口"),s(e,{color:"red"},{default:t(()=>[Tn]),_:1}),a("，表示该类允许进行克隆。")]),n("p",null,[a("如果一个类没有实现接口"),s(e,{color:"red"},{default:t(()=>[Mn]),_:1}),a("，又要强行进行克隆操作，就会抛出异常"),Hn,a("。")]),Gn]),Ln]),Fn])}const Yn=c(r,[["render",Qn],["__file","09_Object.html.vue"]]);export{Yn as default};
