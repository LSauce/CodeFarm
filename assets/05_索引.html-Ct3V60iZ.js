import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{o as a,c as s,d as e}from"./app-C2Ya8jiw.js";const i="/assets/字典索引-xAsnQuu_.png",p="/assets/image-20230215211126819-DPCS1Ue1.png",l="/assets/书目录-DpkwQP9o.png",t="/assets/数组-CXj2oQsu.png",o="/assets/链表-D9DDHXyM.png",c="/assets/二叉树-BRcf_Qdf.png",d="/assets/image-20230217094430276-rDm5Koo9.png",r="/assets/image-20220516155240706-CBCy2UKM.png",u="/assets/hash表-sXZ8wJmk.png",m="/assets/image-20220516161720378-CzQ9G15D.png",k="/assets/image-20230105104700331-D23yi5Lw.png",g="/assets/image-20230105105007290-BttWcf_-.png",v="/assets/myisam索引主键-BZKNlZz-.png",b="/assets/myisam索引普通索引-VZPWa8aU.png",y="/assets/image-20230105110047347-C-zKdKlK.png",h="/assets/Innodb主键索引-ChyEwDMI.png",f="/assets/innodb普通索引-BtZn195Z.png",w="/assets/image-20220516173955741-CSfpWMk3.png",_="/assets/image-20230106113018528-Cpaosmfq.png",M={},x=e('<p>学习重点</p><ul><li>理解索引是什么，为什么需要索引</li><li>掌握索引的数据结构，其他结构为什么不行</li><li>MySQL中索引的实现，MyISAM和InnoDB的主键索引和非主键索引</li><li>理解什么是回表，什么是覆盖索引</li></ul><h1 id="索引" tabindex="-1"><a class="header-anchor" href="#索引" aria-hidden="true">#</a> 索引</h1><p><span style="color:red;background:yellow;"><strong>面试的重点。</strong></span></p><p>索引（Index）是数据库中一种特殊的数据结构，它用于提高数据库查询的效率和速度。在数据库中，索引类似于书籍中的目录，可以根据关键字快速定位到数据所在的位置，从而加速查询操作。</p><p>索引通常包括一个或多个列，每个列包含一个唯一的值，用于标识数据行。当查询语句包含一个或多个索引列时，数据库可以使用索引来快速定位符合条件的数据行，而不必扫描整个数据表。这可以大大提高查询速度，特别是对于大型数据表和复杂查询语句的情况下。</p><p>在数据库中，常用的索引类型包括主键索引、唯一索引、普通索引等。不同的索引类型适用于不同的查询场景，开发人员需要根据实际需求选择合适的索引类型。</p><p>需要注意的是，索引虽然可以提高查询效率，但也会占用一定的存储空间。因此，在设计数据库时需要仔细考虑索引的使用，避免过度使用索引导致数据库性能下降。同时，索引的维护也需要一定的时间和资源，因此需要根据实际情况定期进行索引优化和维护。</p><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>什么是索引呢？索引其实就是一种可以帮助我们<span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>提高查询速度</strong></span>的<span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>数据结构</strong></span>。</p><p>索引类似于一部字典开头的目录，可以帮助MySQL提高查询语句的效率。</p><figure><img src="'+i+'" alt="image-20230104141745391" tabindex="0" loading="lazy"><figcaption>image-20230104141745391</figcaption></figure><figure><img src="'+p+'" alt="image-20230215211126819" tabindex="0" loading="lazy"><figcaption>image-20230215211126819</figcaption></figure><figure><img src="'+l+`" alt="image-20230104141851986" tabindex="0" loading="lazy"><figcaption>image-20230104141851986</figcaption></figure><h2 id="索引的数据结构" tabindex="-1"><a class="header-anchor" href="#索引的数据结构" aria-hidden="true">#</a> 索引的数据结构</h2><p>我们说索引是一个可以帮助我们高效获取数据的数据结构，那么索引采用的是什么样的数据结构呢？</p><p>去探讨一个数据结构适不适合当索引主要有以下三个考察指标：</p><ul><li><p>查询单个值</p><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>select * from user where id=10;

select * from user where name=&quot;zhangsan&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>查询范围值</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> id <span class="token operator">between</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> age <span class="token operator">&lt;</span> <span class="token number">18</span><span class="token punctuation">;</span>

<span class="token comment">-- 索引是不是只能是int的值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>插入数据</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token keyword">user</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ul><p><strong>常见的数据结构</strong></p><p>数组，链表，有序数组，二叉搜索树，B树，B+树，Hash表</p><p><strong>数组：</strong></p><figure><img src="`+t+'" alt="image-20230104090454019" tabindex="0" loading="lazy"><figcaption>image-20230104090454019</figcaption></figure><p>查找单个值，速度慢。因为要比较所有的数据</p><p>查找范围值，速度慢，因为要比较所有数据</p><p>插入值，速度快。</p><p><strong>链表：</strong></p><figure><img src="'+o+'" alt="image-20230104090705907" tabindex="0" loading="lazy"><figcaption>image-20230104090705907</figcaption></figure><p>查找单个值，速度慢。因为要比较所有的数据</p><p>查找范围值，速度慢，因为要比较所有数据</p><p>插入值，速度快。</p><p><strong>有序数组</strong></p><ul><li>查询单个值：速度快。采用二分法</li><li>查询范围值：速度快。因为是有序的，先查找一个边界，然后再顺着走。</li><li>插入数据：速度慢。因为插入一条数据，需要挪动数据。</li></ul><p>有序数组，一般不用来做索引。数据不要频繁插入和删除。历史数据。</p><p>有序数组，不适合用来做普通的索引，有没有什么场景可以用它来做索引。历史数据。2016年的淘宝订单。</p><p>**二叉搜索树：**左小右大。</p><figure><img src="'+c+'" alt="image-20230104090954251" tabindex="0" loading="lazy"><figcaption>image-20230104090954251</figcaption></figure><p><strong>定义：</strong></p><ul><li><p>它或者是一棵空树，或者是具有下列性质的二叉树：</p></li><li><p>若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；</p></li><li><p>若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；</p></li><li><p>它的左、右子树也分别为二叉排序树。</p></li></ul><p>优点： 查找单个数据方便，查找范围值不方便。</p><p>缺点：只有两个孩子。当数据量增大的时候，树的高度会升高，这个时候查询的次数就会变多。随着数据量的增大，会影响查询速度。</p><p>左子树的所有值，小于根节点的值。右子树的所有值，大于根节点。</p><p>查找单个值，速度快。 查找范围值，速度中等，因为要在父节点和子节点之间反复跳转。</p><p>插入数据，速度快。</p><p>特殊的二叉搜索树。红黑树。</p><p>查找单个值，速度快。 查找范围值，速度慢，因为要在父节点和子节点之间反复跳转。</p><p>插入数据，速度快。</p><p>存储信息的密度，高不高。</p><p>存储100w大小的表。log2(100w)。树的高度是20。</p><p>关系型数据库，数据都是放在磁盘里面。一层就要读一次磁盘。</p><p>100w条数据。select * from user where id=50301;</p><p>10ms * 20次 = 200ms = 0.2s</p><ul><li>搜索树(B树、B+树) <ul><li><p>B树</p><ul><li>查询单个值 比数组和链表要方便很多，比二叉树高度降低了，查询的效率也变高了</li><li><span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>查询范围值 查询范围值需要在父子节点之前反复查找，其实不太方便</strong></span></li><li>插入数据：速度快</li></ul><figure><img src="'+d+'" alt="image-20230217094430276" tabindex="0" loading="lazy"><figcaption>image-20230217094430276</figcaption></figure><blockquote><p>B树对比红黑树和二叉树最大的进步：树的高度降低了，查询效率变高了。</p></blockquote><blockquote><p>为什么说树的高度降低了之后，查询效率会变高：</p><p>这个主要是和磁盘的读取策略以及 数据库的设计策略有关系。</p><p>结论：数据库在读取数据的时候，每一层会经过一次磁盘IO。假如数据的高度比较高，那么就需要经过多次的磁盘IO才能找到对应的数据，树的高度降低了之后，磁盘IO的次数会减少，那么这个时候查询速度增高。</p></blockquote></li><li><p>B+树（Btree）</p><ul><li>B+树其实就是在B树的基础之上进行了优化。 <ul><li>叶子节点之间维护一个指针，方便了范围查找</li><li>所有的非叶子节点，都在叶子节点中冗余一份</li><li>所以的非叶子节点，只存储key，不存储data，会降低树的高度，进一步提高查询的效率。</li></ul></li><li>查询单个值 比较方便，速度快</li><li>查询范围值 比较方便（因为叶子节点之间维护了一个指针，指向下一个叶子节点）</li><li>插入值：方便</li><li>B+树其实也是MySQL官方推荐我们使用的数据结构。Btree</li><li>MySQL对标准的B+树做了一些优化。主要就是增加了回去的指针。</li></ul></li></ul></li></ul><figure><img src="'+r+'" alt="image-20220516155240706" tabindex="0" loading="lazy"><figcaption>image-20220516155240706</figcaption></figure><ul><li><p>Hash表</p><p>hash索引。在MySQL中，也有一种索引类型，叫做Hash索引，底层使用的是Hash表。</p><figure><img src="'+u+'" alt="image-20220516155810313" tabindex="0" loading="lazy"><figcaption>image-20220516155810313</figcaption></figure><ul><li>查询单个值 很方便，对比B+树来说要方便一些</li><li>查询范围值 很不方便，需要一个一个查。</li><li>插入值： 方便</li></ul><p>Hash索引是MySQL内部使用的一种索引，没有开放给用户使用。</p></li></ul><p>我们选来做索引的就是B+树。</p><p>问题1： 索引的结构为什么选B+树。为啥不选红黑树做索引。</p><p>问题2： 为什么索引结构是B+树？</p><p>先分析一些显而易见的不适合用来做索引的（数组 链表 有序数组）。再对比分析，为什么红黑树和二叉搜索树不行，主要的问题，是存储信息的密度太低。</p><p>https://www.cs.usfca.edu/~galles/visualization/RedBlack.html</p><h2 id="索引的实现" tabindex="-1"><a class="header-anchor" href="#索引的实现" aria-hidden="true">#</a> 索引的实现</h2><p>索引的实现其实就是去介绍一下，数据库中数据到底是怎样存储的。在介绍这个之前，我们需要先了解一下数据库的组成结构。</p><figure><img src="'+m+'" alt="image-20220516161720378" tabindex="0" loading="lazy"><figcaption>image-20220516161720378</figcaption></figure><p>了解了MySQL的结构之后，那我们就可以知道，数据的存储和存储引擎息息相关。不同的存储引擎存储数据的方式是不一样的。</p><p>MySQL底层的存储引擎是作为一个插件存在。</p><p>存储引擎就是MySQL底层怎样组织这些数据。（这些数据最终都是在磁盘上的），也就是在磁盘上怎样组织这些数据。</p><p>在MySQL中，有很多种存储引擎</p><ul><li>InnoDB（5.1之后默认的存储引擎），这个存储引擎其实一开始是以插件的形式存在的，在5.1之后，MySQL官方团队把InnoDB当成了默认的存储引擎。</li><li>MyISAM（5.1之前默认的存储引擎），这个存储引擎是由MySQL的官方团队开发的。亲儿子。</li><li>Memory（基本不用）</li></ul><h3 id="myisam" tabindex="-1"><a class="header-anchor" href="#myisam" aria-hidden="true">#</a> MyISAM</h3><p><code>C:\\ProgramData\\MySQL\\MySQL Server 5.7\\Data</code></p><figure><img src="'+k+'" alt="image-20230105104700331" tabindex="0" loading="lazy"><figcaption>image-20230105104700331</figcaption></figure><p>首先，来看一下MyISAM这种存储引擎是怎样存储数据的。</p><p>MyISAM的表都有三个文件：</p><figure><img src="'+g+`" alt="image-20230105105007290" tabindex="0" loading="lazy"><figcaption>image-20230105105007290</figcaption></figure><ul><li><p><code>.frm</code></p><p>表结构定义文件.定义表结构， 表里面有哪些列，列的类型。</p></li><li><p><code>.MYD</code></p><p>数据文件，其实也就是这个表中的数据都存储到这个文件中</p></li><li><p><code>.MYI</code></p><p>索引文件，这个表中的所有的索引树都是存储在这个文件中</p></li></ul><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>mysql&gt; create table t_myisam (
  ID int primary key,
  k int NOT NULL DEFAULT 0, 
  s varchar(16) NOT NULL DEFAULT &#39;&#39;,
    -- index关键词 表明我想创建一个索引
    -- k 索引的名字
    -- (k) 索引列
  index k_name(k)
) engine=MyISAM;

insert into t_myisam values(100,1, &#39;aa&#39;),(200,2,&#39;bb&#39;),(300,3,&#39;cc&#39;),(500,5,&#39;ee&#39;),(600,6,&#39;ff&#39;),(700,7,&#39;gg&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="image-20230106112545426" tabindex="0" loading="lazy"><figcaption>image-20230106112545426</figcaption></figure><p>key就是主键。data存储的就是数据的地址（指向MYD文件中。）</p><figure><img src="'+b+'" alt="image-20230106112808292" tabindex="0" loading="lazy"><figcaption>image-20230106112808292</figcaption></figure><p>MyISAM的索引分为两种类型，一种叫做主键索引，一种叫做非主键索引。</p><p>对于MyiSAM来说，MYI文件里面存储的是索引，MYD文件里面存储的data。</p><p>对于它的主键索引，key是主键值，data是地址值。</p><p>对于它的非主键索引，key是索引值，data是地址。</p><h4 id="主键索引" tabindex="-1"><a class="header-anchor" href="#主键索引" aria-hidden="true">#</a> 主键索引</h4><p>主键索引是指MyISAM默认会根据主键这一列的值，去建立一个B+树，这个B+树就叫做主键索引树。</p><ul><li>key：主键值</li><li>data：主键这一行数据对应的地址值</li></ul><h4 id="非主键索引" tabindex="-1"><a class="header-anchor" href="#非主键索引" aria-hidden="true">#</a> 非主键索引</h4><p>MyISAM中的非主键索引，是指我们可以把其他的非主键列声明为索引列，那么这样MyISAM就可以帮助我们根据这一列的值去建立一个索引树。意味着一个表可以有多个索引树。</p><ul><li>key：索引列的值</li><li>data：索引列这一行数据对应的地址值</li></ul><p>对于MyISAM中的索引来说，数据和索引是分开存储的，这种索引叫做 <span style="color:red;background:yellow;"><strong>非聚集索引。</strong></span></p><h3 id="innodb" tabindex="-1"><a class="header-anchor" href="#innodb" aria-hidden="true">#</a> InnoDB</h3><p>InnoDB的索引分为两种类型，一种叫做主键索引，一种叫做非主键索引。</p><p>每一个InnoDB表都有两个文件：</p><figure><img src="'+y+`" alt="image-20230105110047347" tabindex="0" loading="lazy"><figcaption>image-20230105110047347</figcaption></figure><ul><li><p><code>.frm</code></p><p>表结构定义文件</p></li><li><p><code>.ibd</code></p><p>数据和索引文件：这个文件中存储了数据和索引。</p></li></ul><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>mysql&gt; create table t_innodb (
  ID int primary key,
  k int NOT NULL DEFAULT 0, 
  s varchar(16) NOT NULL DEFAULT &#39;&#39;,
  index k_name(k)
) engine=InnoDB;

insert into t_innodb values(100,1, &#39;aa&#39;),(200,2,&#39;bb&#39;),(300,3,&#39;cc&#39;),(500,5,&#39;ee&#39;),(600,6,&#39;ff&#39;),(700,7,&#39;gg&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="主键索引-1" tabindex="-1"><a class="header-anchor" href="#主键索引-1" aria-hidden="true">#</a> 主键索引</h4><figure><img src="`+h+'" alt="image-20230106112909592" tabindex="0" loading="lazy"><figcaption>image-20230106112909592</figcaption></figure><p>key：主键值</p><p>data：主键这一行对应的其他列的数据</p><p>在InnoDB的<span style="color:red;background:yellow;"><strong>主键索引中</strong></span>，索引和数据是存储在同一个数据页中，也就是索引和数据是存储在一起的，这种叫做聚集索引。</p><blockquote><p>在InnoDB中，数据是依附于主键索引树来存储的，假如没有主键的话，那么就不存在主键索引树，那么数据也没办法存储。</p><p>所以对于InnoDB的表来说，<span style="color:red;background:yellow;"><strong>必须得有一个主键。</strong></span></p><p>对于InnoDB的表来说，如果用户在建表的时候，没有设置主键，那么InnoDB会维护一个隐藏的列来当做主键。</p></blockquote><p>1.myisam使用索引存储。主键索引和非主键索引，其实存储的都是地址。 都需要去数据文件中找这个数据</p><p>2.innodb使用索引存储，主键索引，直接存储的是数据。非主键索引，存储的是主键的值。</p><p>select * from t where k=3;</p><h4 id="非主键索引-1" tabindex="-1"><a class="header-anchor" href="#非主键索引-1" aria-hidden="true">#</a> 非主键索引</h4><p>非主键索引是指根据其他的列建立的索引。</p><figure><img src="'+f+'" alt="image-20230106112943799" tabindex="0" loading="lazy"><figcaption>image-20230106112943799</figcaption></figure><p>key：索引列的值</p><p>data：这一行数据对应的主键值</p><p>在InnoDB的非主键索引中，索引只和主键存储在到了一起，实际上没有和数据存储在一起，其实也是<span style="color:red;background:yellow;"><strong>非聚集索引。</strong></span></p><p><span style="color:red;background:yellow;"><strong>对于MyISAM来说</strong></span>，主键索引和非主键索引，都是怎么存的？</p><p>都是存的B+树，然后key是索引的值，data都是存的地址。这个地址是指向MYD文件里面的。</p><p><span style="color:red;background:yellow;"><strong>对于InnoDB来说，</strong></span>主键索引和非主键索引。</p><p>主键索引，存的B+树，key是主键的值，value是这一行的其他值。</p><p>（100,1，‘aa&#39;）</p><p>对于非主键索引，key存的是索引的值，value是主键的值。</p><h3 id="myisam-与innodb的区别" tabindex="-1"><a class="header-anchor" href="#myisam-与innodb的区别" aria-hidden="true">#</a> MyISAM 与InnoDB的区别</h3><ul><li><p>存储的文件不一样，MyISAM有三个文件(frm MYD MYI)、InnoDB只有两个文件(frm ibd)。</p></li><li><p><span style="color:red;background:yellow;font-size:文字大小;font-family:字体;"><strong>InnoDB支持事务、MyISAM不支持事务</strong></span></p><blockquote><p>既然MyISAM不支持事务，那么MyISAM还有没有用呢？</p><p>什么样的表不需要事务呢？存储什么样的数据才不需要事务呢？什么样的数据不需要使用增删改呢？ 历史数据。普通的日志数据。</p></blockquote></li><li><p>InnoDB支持外键，MyISAM不支持外键</p></li><li><p>InnoDB支持表锁和行锁，MyISAM只支持表锁</p><figure><img src="'+w+`" alt="image-20220516173955741" tabindex="0" loading="lazy"><figcaption>image-20220516173955741</figcaption></figure></li></ul><h2 id="innodb举例" tabindex="-1"><a class="header-anchor" href="#innodb举例" aria-hidden="true">#</a> Innodb举例</h2><p>还是使用之前的数据。</p><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>mysql&gt; create table T (
  ID int primary key,
  k int NOT NULL DEFAULT 0, 
  s varchar(16) NOT NULL DEFAULT &#39;&#39;,
  index k(k)
) engine=Innodb;

insert into T values(100,1, &#39;aa&#39;),(200,2,&#39;bb&#39;),(300,3,&#39;cc&#39;),(500,5,&#39;ee&#39;),(600,6,&#39;ff&#39;),(700,7,&#39;gg&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+_+`" alt="image-20230106113018528" tabindex="0" loading="lazy"><figcaption>image-20230106113018528</figcaption></figure><p>如果现在查询一条SQL，经历怎样的过程？</p><p>如果查询的SQL是这样的： select * from T where id=500;</p><h3 id="回表" tabindex="-1"><a class="header-anchor" href="#回表" aria-hidden="true">#</a> 回表</h3><p><code>select * from T where k =3;</code></p><ul><li>在k索引树上找到k=3的记录，取得ID=300</li><li>再到ID索引树查到ID=300对应的行</li><li>再到主键索引树上找到k=5的记录，发现不符合条件。</li></ul><p>在这个过程中，回到主键索引树搜索的过程，我们称为<span style="color:yellow;background:red;"><strong>回表</strong></span>。可以看到，这个查询过程读了 k 索引树的 2 条记录（步骤 1、3 ），回表了一次（步骤 2 ）。在这个例子中，由于查询结果所需要的数据只在主键索引上有，所以不得不回表。那么，有没有可能经过索引优化，避免回表过程呢？</p><p>如果我们写得SQL是这样： select id from T where k=3;</p><p>后续，需要什么字段，拿什么字段，不要直接写*。有可能会造成不必要的回表。</p><p>select * from T where k between 3 and 5;</p><p>这个SQL，会经历怎样的过程？</p><p><code>select * from T where k between 3 and 5;</code></p><ul><li>去k索引树上找，k=3。拿到id=300</li><li>回主键索引树，取得这一行的数据。</li><li>去k索引树，往后拿5，拿到id=500</li><li>回主键索引树，取得这一行的数据。 拿id=500的数据</li><li>再往后拿，拿到k=6. 不符合条件，结束。</li></ul><p>这个过程，我们在k索引树上读了三条记录 （3 5 6）。回表了两次(300 500)</p><h3 id="覆盖索引" tabindex="-1"><a class="header-anchor" href="#覆盖索引" aria-hidden="true">#</a> 覆盖索引</h3><p><code>select ID from T where k =3</code></p><p>如果执行的语句是 这时只需要查 ID 的值，而 ID 的值已经在 k 索引树上了，因此可以直接提供查询结果，不需要回表。也就是说，在这个查询里面，索引 k 已经“覆盖了”我们的查询需求，我们称为<span style="color:yellow;background:red;"><strong>覆盖索引</strong></span>。由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以使用覆盖索引是一个常用的性能优化手段。</p><p>今后建议大家，不要写 select * from T where k=3; 需要哪些列，你就把这些列，全部写出来。</p><h2 id="索引的语法" tabindex="-1"><a class="header-anchor" href="#索引的语法" aria-hidden="true">#</a> 索引的语法</h2><blockquote><p>我们给一个列声明为主键，默认主键这一列就会是主键索引（主键这一列会默认创建一个主键索引树）</p></blockquote><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">-- 查询索引</span>
<span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> innodb_user<span class="token punctuation">;</span>

<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token keyword">if</span> <span class="token keyword">exists</span> student1<span class="token punctuation">;</span>
<span class="token comment">-- 建立索引</span>
<span class="token keyword">create</span> <span class="token keyword">table</span> student1<span class="token punctuation">(</span>
	id <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	gender <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">-- index  索引的名字(列名)</span>
    <span class="token comment">-- index 索引的名字(列名1, 列名2)  联合索引</span>
	<span class="token keyword">index</span> idx_name<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">using</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span><span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token punctuation">;</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student1<span class="token punctuation">;</span>

<span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span>

<span class="token comment">-- 删除索引</span>
<span class="token comment">-- alter table TABLE_NAME drop index INDEX_NAME;</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student1 <span class="token keyword">drop</span> <span class="token keyword">index</span> idx_name<span class="token punctuation">;</span>

<span class="token comment">-- 添加索引</span>
<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">index</span> idx_age<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">alter</span> <span class="token keyword">table</span> student <span class="token keyword">add</span> <span class="token keyword">index</span> idx_name_age<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有时候发现，有一条SQL，特别慢，怎么办？</p><p>首先，需要看一下这个SQL。SQL是否写得有问题： <code>select * from t where s = &#39;ee&#39;;</code></p><p>其次，如果条件没有办法动。尝试建索引。</p><p>explain。下去可以看下。 可以看查询的过程，查询中，是否走了索引。</p><p><code>select * from t where k=5 and s = &#39;ee&#39;;</code></p><h2 id="面试题" tabindex="-1"><a class="header-anchor" href="#面试题" aria-hidden="true">#</a> 面试题</h2><ol><li><p>索引采用的是什么数据结构？为什么采用这种数据结构</p><p>B+树。列举一下其他的数据结构，对比一下。</p></li><li><p>数据库为什么推荐使用自定义主键，并且在MySQL中使用推荐使用主键自增的策略？</p><ul><li><p>自定义主键：MySQL默认的使用的是InnoDB存储引擎，那么InnoDB存储引擎的数据和主键索引树是绑定在一起的，假如没有主键索引树，那么数据没有办法存储。假如没有给表指定主键的话，那么InnoDB会创建一个隐藏的列来当做主键，并建立主键索引树。假如使用了隐藏的列来当做的主键的话，那么我么查询的时候，就会浪费主键索引索引树带来的索引性能，所以推荐自己定义主键。</p></li><li><p>自增的策略：</p><p>因为自增的策略，在插入的时候，永远只会插入到索引树的右侧，那么这样就能保证树的结构不会发生比较大的改变，而结构改变是需要消耗时间的，所以这样就能保证插入的效率会比较稳定。</p><div class="language-SQL line-numbers-mode" data-ext="SQL"><pre class="language-SQL"><code>create table student1(
	id int primary key auto_increment,
    name varchar(255),
    
    create_time timestamp default current_timestamp,
    update_time timestamp default current_timestamp on update current_timestamp
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>InnoDB和MyISAM有什么区别？什么情况下使用MyISAM？</p></li><li><p>什么是回表？如何避免回表？</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">create</span> <span class="token keyword">table</span> ts<span class="token punctuation">(</span>
	id <span class="token keyword">int</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>
	name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
	age <span class="token keyword">int</span><span class="token punctuation">,</span>
	<span class="token keyword">index</span> idx_name<span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token keyword">using</span> <span class="token keyword">BTREE</span>
<span class="token punctuation">)</span><span class="token keyword">character</span> <span class="token keyword">set</span> utf8<span class="token punctuation">;</span>


<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ts <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">-- 查询主键索引树、查询速度快</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ts <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span>  <span class="token comment">--  会先去 idx_name索引树上找。 回表。</span>

<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> ts <span class="token keyword">where</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token comment">-- 遍历整个主键索引树、查询速度很慢</span>

<span class="token comment">-- 先查询index_name 整个索引的索引树，查询到的结果是主键</span>
<span class="token comment">-- 再根据查询到的主键值 去主键索引树查询 对应的数据</span>
<span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age <span class="token keyword">from</span> ts <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">;</span> 


<span class="token comment">-- 最左匹配元素</span>
<span class="token comment">-- 索引的生效范围是最左开始的。   (name,age,address )</span>
<span class="token comment">-- 查询中，写什么，能走到索引？</span>
<span class="token comment">-- select * from ts where name=&#39;zhangsan&#39;;  -- 光走age不行。</span>
<span class="token comment">-- select * from ts where name=&#39;zhangsan&#39; and age=20;</span>

<span class="token comment">-- (a, b, c, d)   用哪些作为查询条件，可以走这颗索引树   a       a,b     a,b,c    a,b,c,d</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><blockquote><p>回表：在一次查询中，假如需要先根据非主键索引树查询主键值，然后再根据主键值查询主键索引树，这种查询了两遍索引树的情况，叫做回表。</p><p>在实际的工作中，应该要尽量避免回表的情况出现，如何避免呢？</p><ul><li><p>尽量使用主键查询</p></li><li><p>尽量避免写 select *</p></li><li><p>可以考虑使用联合索引.多个列创建一个索引。</p></li></ul></blockquote><ol start="5"><li><p>索引性能这么好，是不是一个表建立的索引越多越好？</p><blockquote><p>不是。</p><ol><li>声明一个索引列，需要建立一个索引树，需要占用空间</li><li>假如声明的索引变多了之后，对应的索引树也会变多，查询的效率固然会提升，但是增删改的时候要去改变数据，改变数据势必会改变索引树的结构，维护这些索引树的成本也就提升了，增删改的效率也就降低了。</li></ol><p>那么一般针对一个表，建立几个索引比较合适呢？通常默认为一个表建立的索引不要超过5个。</p></blockquote></li><li><p>什么样的列适合当索引？</p><ul><li><p>数据不重复出现的</p></li><li><p>值尽量不为空的（null）</p></li><li><p>业务场景中查询条件比较多的</p></li><li><p>这一列的值不经常变化的</p></li></ul></li></ol><p>三层可以存多少数据？</p><p>B+树和二叉搜索树的效率。</p><p>对于Innodb的B+树来说，节点大小是16k。</p><p>id bigint ，还有引用，在MySQL中大概占6字节。bigint 8个字节。总共14个字节。</p><p>16 * 1024 / 14 = 1170个数据</p><p>底下层1k一行。 所以最终三层可以存储<code>1170*1170*16 = 2KW</code></p><p>最终，让第一层常驻内存，也就是我只用读两次磁盘，就可以获取我想要的数据。</p>`,158),I=[x];function S(B,L){return a(),s("div",null,I)}const q=n(M,[["render",S],["__file","05_索引.html.vue"]]);export{q as default};
