import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as t,o as e,c as p,e as o,w as l,d as n,a as c}from"./app-DnMTRoWd.js";const i="/assets/image-20230824170722846-lUEwT-Qo.png",u="/assets/image-20230202164950511-DEg53Y6z.png",r="/assets/image-20230202165526995-BhKryrfY.png",d="/assets/image-20230202170140154-VN7eoo7k.png",k="/assets/image-20230202170604997-CYwQARTY.png",v="/assets/image-20230202171744609-DD3qYFz2.png",m="/assets/image-20230825162742023-aIYIOZIq.png",g="/assets/image-20230202172514996-B37HXUs9.png",b="/assets/image-20230207155457330-DlRaNTgc.png",h="/assets/image-20230202151408305-D-QTucqd.png",S="/assets/Web目录结构和Maven工程目录结构-1678348341736-BmY8nIkZ.jpg",f={},x=n(`<h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><h2 id="学习目标" tabindex="-1"><a class="header-anchor" href="#学习目标" aria-hidden="true">#</a> 学习目标</h2><blockquote><ol><li><p>掌握Tomcat的使用，以及IDEA中使用Tomcat应用的方式</p></li><li><p>掌握Web应用的目录结构</p><ul><li>标准目录结构（应用部署、编译）</li><li>Maven开发的目录结构</li><li>使用IDEA来开发Web应用</li></ul></li><li><p>熟悉Servlet的执行流程和生命周期</p><ul><li>掌握service方法</li><li>掌握init、destroy方法执行时机和次数</li></ul></li><li><p>熟悉Servlet使用和相关配置</p></li><li><p>熟悉ServletContext的功能</p></li><li><p>了解XML配置方式</p></li></ol></blockquote><h2 id="前置知识准备" tabindex="-1"><a class="header-anchor" href="#前置知识准备" aria-hidden="true">#</a> 前置知识准备</h2><blockquote><ul><li>面向对象编程（对象、类）</li><li>Tomcat的应用程序和启动、docBase配置 → 要在IDEA中直接使用Tomcat</li><li>开发工具：Postman</li></ul></blockquote><h1 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h1><h2 id="javaee介绍" tabindex="-1"><a class="header-anchor" href="#javaee介绍" aria-hidden="true">#</a> JavaEE介绍</h2><p>JavaSE（Java Platform, Standard Edition）是Java平台的标准版，它提供了Java语言的核心库和运行环境，用于开发和部署独立的Java应用程序。JavaSE包含了Java的基本功能和特性，如面向对象编程、异常处理、集合框架、多线程、输入输出等。它是Java开发的基础，所有其他的Java技术都是建立在JavaSE之上的。</p><p>JavaEE（Java Platform, Enterprise Edition）是Java平台的企业版，它是建立在JavaSE之上的一组扩展和标准，专注于开发和部署企业级的分布式应用程序。<strong>Web服务器。<strong>JavaEE提供了一系列的API和规范，用于实现企业级应用所需的各种功能，如Web应用开发、数据库访问、消息传递、事务处理、安全性等。JavaEE还包括一些服务器端的技术和组件，如</strong>Java Servlet</strong>、JavaServer Pages（JSP）、Enterprise JavaBeans（EJB）、Java Message Service（JMS）等。</p><p>JavaSE和JavaEE可以看作是Java平台的两个不同的版本，它们的关系是JavaEE是建立在JavaSE之上的扩展和增强。JavaSE提供了Java语言的基本功能和库，而JavaEE在此基础上提供了更多面向企业级应用的功能和组件，用于开发大型、复杂的分布式系统。因此，如果你只是开发简单的独立应用程序，使用JavaSE就足够了；而如果你需要开发企业级的应用程序，特别是涉及到Web开发、事务处理等方面，那么JavaEE会更适合。</p><p>服务器：服务器硬件、服务器应用（软件）</p><p>B/S和C/S是指不同的客户端/服务器架构模型。</p><p>B/S代表浏览器/服务器（Browser/Server），它是一种网络应用程序的架构模型。在B/S模型中，用户通过浏览器作为客户端向服务器发送请求，服务器处理请求并返回响应。这种模型常见于Web应用程序，其中浏览器负责展示用户界面，而服务器处理逻辑和数据处理。</p><p>C/S代表客户端/服务器（Client/Server），这是另一种常见的架构模型。在C/S模型中，客户端和服务器之间有直接的通信，客户端发送请求给服务器，服务器处理请求并返回响应。这种模型通常用于桌面应用程序或本地网络环境中。</p><h2 id="servlet介绍" tabindex="-1"><a class="header-anchor" href="#servlet介绍" aria-hidden="true">#</a> Servlet介绍</h2><p>Server Applet 缩写组成的，小程序，指的是运行在JavaEE容器（Tomcat）下的小程序</p><p>Servlet是一种Java编程语言的服务器端组件，它主要用于扩展Web服务器的功能。Servlet运行在服务器上，接收来自客户端（通常是Web浏览器）的请求并生成响应。它是Java企业版（Java Enterprise Edition，简称Java EE）的一部分，用于构建基于Web的应用程序。</p><p>Servlet通过Java编程语言编写，遵循Servlet API规范。它可以被部署到支持Servlet规范的Web容器（如Apache Tomcat、Jetty等）中运行。通过Servlet，开发人员可以处理HTTP请求、执行业务逻辑、访问数据库、生成动态内容并将响应发送回客户端。</p><blockquote><p>思考：</p><p>我们开发为什么要定义规范？</p><p>有一个类叫Father，抽象类，它有3个儿子（子类） Son1、Son2、Son3 ，有一个方法叫play</p><p>Son1 son1 = new Son1();</p><p>Son2 son2 = new Son2();</p><p>son1.play();</p><p>son2.play();</p><p>变化一下写法</p><p>Father son1 = new Son1();</p><p>Father son2 = new Son2();</p><p>son1.play();</p><p>son2.play();</p><p>如果做了这样的事情</p><p>Father son2 = new Son3();</p><p>son2.play();</p></blockquote><p>不同的子类对象调用抽象类中定义的方法，实现不同的业务</p><p>通过Tomcat可以访问<code>静态资源</code>和<code>动态资源</code>，静态资源就是我们前端学的内容，比如HTML、JS、CSS、xml、字体文件、图片等内容，而Servlet提供的是动态资源的访问</p><p>Servlet的开发其实就是Servlet中的service方法的开发 → Servlet的开发规范</p><p>我们接下来的需求：访问<code>http://localhost:8080/ee/user/login</code>,页面上出现 LOGIN SUCCESS</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">GenericServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> stone
 * <span class="token keyword">@date</span> 2023/01/12 22:44
 */</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/user/login&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;LOGIN SUCCESS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="idea中开发web应用" tabindex="-1"><a class="header-anchor" href="#idea中开发web应用" aria-hidden="true">#</a> IDEA中开发Web应用</h1><h2 id="pom-xml" tabindex="-1"><a class="header-anchor" href="#pom-xml" aria-hidden="true">#</a> pom.xml</h2><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>packaging</span><span class="token punctuation">&gt;</span></span>war<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>packaging</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>javax.servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="打包方式" tabindex="-1"><a class="header-anchor" href="#打包方式" aria-hidden="true">#</a> 打包方式</h3><p>packaging = war</p><blockquote><p>pom 父工程，提供子工程通用的内容，只有一个pom.xml，没有代码和文件</p><p>war web应用，要满足web应用的目录结构，要放在JavaEE容器下运行</p><p>jar 默认的打包方式，如果想要运行jar，里面要包含main方法</p></blockquote><h3 id="scope作用域" tabindex="-1"><a class="header-anchor" href="#scope作用域" aria-hidden="true">#</a> scope作用域</h3><p>默认的作用域是compile</p><p><code>javax.servlet-api</code> 的作用域是<strong>provided</strong>，编译的时候需要，而打包、运行的时候都不需要</p><p>因为已经有了，Tomcat中已经有了这个依赖，在tomcat的lib目录中有一个jar包servlet-api.jar</p>`,34),q=c("img",{src:i,alt:"image-20230824170722846",style:{zoom:"50%"}},null,-1),w=n('<p>如果硬是要打包进去，有可能会发生冲突，导致未知的错误</p><h2 id="servlet开发-后面会单独重点讲解" tabindex="-1"><a class="header-anchor" href="#servlet开发-后面会单独重点讲解" aria-hidden="true">#</a> Servlet开发(后面会单独重点讲解)</h2><p>开发好的Servlet和资源文件 编译后（target/{artifactId}-{version}目录） 放入到Tomcat下的webapp目录里是可以访问的</p><figure><img src="'+u+'" alt="image-20230202164950511" tabindex="0" loading="lazy"><figcaption>image-20230202164950511</figcaption></figure><h2 id="docbase-设置来访问资源" tabindex="-1"><a class="header-anchor" href="#docbase-设置来访问资源" aria-hidden="true">#</a> docBase 设置来访问资源</h2><figure><img src="'+r+`" alt="image-20230202165526995" tabindex="0" loading="lazy"><figcaption>image-20230202165526995</figcaption></figure><p>demo2.xml文件中的内容，指定docBase，其实访问的这个指定的这个路径下的资源</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>D:\\WorkSpace\\cskaoyan2023\\02-备课\\JavaEE\\prepare_talk2\\resources_new\\codes\\servlet2\\demo1-first-servlet\\target\\demo1-first-servlet-1.0-SNAPSHOT<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="★-idea中使用tomcat" tabindex="-1"><a class="header-anchor" href="#★-idea中使用tomcat" aria-hidden="true">#</a> ★_IDEA中使用Tomcat</h2><figure><img src="`+d+'" alt="image-20230202170140154" tabindex="0" loading="lazy"><figcaption>image-20230202170140154</figcaption></figure><figure><img src="'+k+'" alt="image-20230202170604997" tabindex="0" loading="lazy"><figcaption>image-20230202170604997</figcaption></figure><figure><img src="'+v+'" alt="image-20230202171744609" tabindex="0" loading="lazy"><figcaption>image-20230202171744609</figcaption></figure><p>JavaEE阶段都会在IDEA中使用Tomcat</p><p>SpringMVC阶段也会在IDEA中使用Tomcat</p><blockquote><p>需要大家做的事情</p><ul><li>packaging=war</li><li>增加Tomcat server</li><li>提供deployment的配置（docBase） <ul><li>artifact → war exploded</li><li>application context → 路径</li></ul></li></ul></blockquote><figure><img src="'+m+'" alt="image-20230825162742023" tabindex="0" loading="lazy"><figcaption>image-20230825162742023</figcaption></figure><h1 id="★★★-servlet开发" tabindex="-1"><a class="header-anchor" href="#★★★-servlet开发" aria-hidden="true">#</a> ★★★_Servlet开发</h1><h2 id="genericservlet和httpservlet" tabindex="-1"><a class="header-anchor" href="#genericservlet和httpservlet" aria-hidden="true">#</a> GenericServlet和HttpServlet</h2><p>都可以使用 来进行Servlet的开发</p><p>通过继承，来实现其方法</p><blockquote><ol><li>GenericServlet 实现其抽象方法service</li><li>HttpServlet 重写doGet、doPost方法</li></ol></blockquote><p>这两种方式其实都是执行的是service方法，HttpServlet是GenericServlet的子类，只不过是HttpServlet里的service方法给你实现好了</p><figure><img src="'+g+`" alt="image-20230202172514996" tabindex="0" loading="lazy"><figcaption>image-20230202172514996</figcaption></figure><p>它会根据你的请求方法不同，去执行HttpServlet中的不同方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HttpServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 继承GenericServlet
 *  实现其抽象方法service
 *  localhost:8080/demo1/servlet1
 *  控制台里打印hello servlet1
 * <span class="token keyword">@author</span> stone
 * <span class="token keyword">@date</span> 2023/02/02 17:29
 */</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servlet1&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet1</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello servlet1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 继承HttpServletServlet
 *  重写其doGet、doPost方法
 *  localhost:8080/demo1/servlet2
 *  控制台里打印hello servlet2
 * <span class="token keyword">@author</span> stone
 * <span class="token keyword">@date</span> 2023/02/02 17:29
 */</span>
<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/servlet2&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Servlet2</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 接下来会使用浏览器方法，通过浏览器的地址栏发送的请求是GET请求</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello servlet2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 自己写业务</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>我们在上面的代码中需要做的就是继承GenericServlet或HttpServlet，然后通过不同的实现类来完成不同的业务处理，而我们处理业务的核心方法就是</p><ul><li>doService</li><li>doGet/doPost</li></ul></blockquote><h2 id="webservlet注解" tabindex="-1"><a class="header-anchor" href="#webservlet注解" aria-hidden="true">#</a> @WebServlet注解</h2><p>务必要记住value属性即可</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">TYPE</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment">// 该注解可以写在类上</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span> <span class="token comment">// 该注解运行时生效</span>
<span class="token annotation punctuation">@Documented</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">WebServlet</span> <span class="token punctuation">{</span>
    <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 该Servlet的路径，通过该路径可以访问到这个servlet的service或doGet、doPost方法</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">urlPatterns</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 和value属性的功能是一致的</span>

    <span class="token keyword">int</span> <span class="token function">loadOnStartup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 默认值是负数；如果为负数的话，意味着放访问该servlet路径的时候，该Servlet才初始化；如果不为负数，则Tomcat启动的时候就初始化，并且会按照数字的顺序来初始化不同的Servlet </span>

    <span class="token class-name">WebInitParam</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 提供初始化参数，当前基本不用</span>

    <span class="token keyword">boolean</span> <span class="token function">asyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">smallIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">largeIcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">description</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span> <span class="token function">displayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="value属性-或urlpatterns" tabindex="-1"><a class="header-anchor" href="#value属性-或urlpatterns" aria-hidden="true">#</a> value属性（或urlPatterns）</h3><p>我们通常使用的是其value属性</p><p>功能上和urlPatterns其实是一样的，但是value属性有一个好处就是如果说该注解只使用了value属性的话，value= 可以省略不写</p><p>使用其@Value属性建立URL和Servlet之间的映射关系</p><h3 id="一个servlet可以对应多个url-pattern" tabindex="-1"><a class="header-anchor" href="#一个servlet可以对应多个url-pattern" aria-hidden="true">#</a> 一个Servlet可以对应多个URL-Pattern</h3><p>一个URL-Pattern不能对应多个Servlet</p><p>@WebServlet注解的时候，value属性和url-pattern属性，接收的值的类型String[]</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;/hello1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/hello2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;/hello3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello servlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="★★★url-pattern" tabindex="-1"><a class="header-anchor" href="#★★★url-pattern" aria-hidden="true">#</a> ★★★URL-Pattern</h2><p>使用@WebServlet的value属性或url-pattern属性来维护，简历url-pattern和Servlet之间的映射关系</p><p>@WebServlet注解的value属性的用法</p><h3 id="合法写法" tabindex="-1"><a class="header-anchor" href="#合法写法" aria-hidden="true">#</a> 合法写法</h3><blockquote><ol><li>/路径匹配</li></ol><p>语法：/xxx或/xxx/*</p><p>注意事项：</p><ul><li>以/作为开头（不能省略开头的/），可以写多级的url</li><li>可以使用通配符* <ul><li>举个例子/hello/*, 这里的*可以代表多级的任意URL；</li></ul></li></ul></blockquote><blockquote><ol start="2"><li>/类型匹配</li></ol><p>语法：*.xxx</p><p>注意事项：</p><ul><li>*.do、*.action这样的一些写法，比如 hello.do就可以找到*.do对应的Servlet来处理请求</li><li>当前基本上不再使用</li><li>比如一些特殊的资源，可以使用特殊的Servlet来处理，比如jpg、css等这些资源</li></ul></blockquote><blockquote><ol start="3"><li>缺省匹配</li></ol><p>语法：/</p><p>注意事项：非常特殊的写法</p></blockquote><h3 id="优先级" tabindex="-1"><a class="header-anchor" href="#优先级" aria-hidden="true">#</a> 优先级</h3><p>1.路径匹配 &gt; 类型匹配</p><p>2.使用的是匹配度更高的Servlet，/abc/d ，存在两个Servlet，分别url-pattern是/abc/* 和/</p><p>通常是我们访问某一个请求，只有一个对应Servlet</p><h3 id="缺省servlet" tabindex="-1"><a class="header-anchor" href="#缺省servlet" aria-hidden="true">#</a> 缺省Servlet</h3><p>提供了一个页面 hello.html，也提供一个servlet，这个Servlet映射的url-pattern也是hello.html</p><figure><img src="`+b+`" alt="image-20230207155457330" tabindex="0" loading="lazy"><figcaption>image-20230207155457330</figcaption></figure><p>Tomcat会提供缺省的Servlet，本身是用来做静态资源访问的，如果你想要提供缺省的Servlet，可以做，将自定义的这个Servlet它的URL-Pattern设置为/ 即可，但是会导致原有的缺省Servlet失效</p><p>如果你没有提供，我给你提供一个默认的；如果你提供了，则以你提供的为准，后面SpringMVC就是在此基础上做了设计的</p><h2 id="servlet的生命周期" tabindex="-1"><a class="header-anchor" href="#servlet的生命周期" aria-hidden="true">#</a> Servlet的生命周期</h2><p>LifeCycle</p><p>生命周期：在一些特定的时间会去执行一些方法，而时间通常指某个东西从初始化到结束在整个阶段中会遇到的一些时间点</p><p>这里我们讲的是Servlet的生命周期，指的是每一个Servlet的生命周期，每一个Servlet它的生命周期都需要单独去考虑</p><p>方法：后续去讲生命周期的时候，都会围绕着方法展开；话题都会是这个方法在什么时候执行，会执行多少次</p><table><thead><tr><th>方法名</th><th>时间</th><th>次数</th><th>说明</th></tr></thead><tbody><tr><td>init</td><td>Servlet初始化</td><td>1</td><td>只执行一次，在service之前，用来用来做一些初始化</td></tr><tr><td>service</td><td>访问Servlet对应的URL</td><td>n</td><td>执行多次，用来处理业务</td></tr><tr><td>destroy</td><td>Servlet销毁</td><td>1</td><td>只执行一次，通常用来做资源的释放</td></tr></tbody></table><p>Servlet是何时初始化的：前面讲@WebServlet注解的时候，有一个属性load-on-startup</p><ul><li>默认值是负数；</li><li>如果为负数的话，意味着放访问该servlet路径的时候，该Servlet才初始化；</li><li>如果不为负数，则Tomcat启动的时候就初始化，并且会按照数字的顺序来初始化不同的Servlet</li></ul><p>Servlet是何时销毁的：</p><ul><li>Tomcat停的时候</li></ul><p>增加几个Servlet</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span>loadOnStartup <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/first&quot;</span><span class="token punctuation">,</span>loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FirstServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/second&quot;</span><span class="token punctuation">,</span>loadOnStartup <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecondServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要看到他们的init、service（doGet）、destroy</p><ul><li>应用程序启动 → first init 、 second init</li><li>分别访问 （不分先后顺序） <ul><li>/first → first service</li><li>/second → second service</li><li>/hello → hello init 、hello service</li><li>再次访问/hello → hello service</li></ul></li><li>应用程序关闭 <ul><li>destroy</li></ul></li></ul><h1 id="servletconfig-了解" tabindex="-1"><a class="header-anchor" href="#servletconfig-了解" aria-hidden="true">#</a> ServletConfig（了解）</h1><p>键值对配置</p><ul><li>放入配置</li><li>获取配置</li></ul><p>要通过ServletConfig实例（对象）来进行操作，每一个Servlet都有与之对应的ServletConfig</p><h2 id="放入配置" tabindex="-1"><a class="header-anchor" href="#放入配置" aria-hidden="true">#</a> 放入配置</h2><p>场景，将username=root这样的键值对放入到ServletConfig</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span>
        initParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在HelloServlet父类的父类GenericServlet中有一个成员变量config是ServletConfig类型的</p><p>而在init方法中有给这个成员变量做赋值</p><p>也就是这个成员变量在初始化阶段，已经获得了这些值</p><p>意味着在service方法（doGet、doPost）中，可以获得这个成员变量，并且从中获取值</p><h2 id="取出配置" tabindex="-1"><a class="header-anchor" href="#取出配置" aria-hidden="true">#</a> 取出配置</h2><p>在Servlet中已经提供了一个方法getServletConfig方法，就是获得GenericServlet中的ServletConfig类型的成员变量config</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子类中可以使用父类的方法，也就是在我们自行开发的Servlet中可以直接来来调用方法来获得</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/hello&quot;</span><span class="token punctuation">,</span>
        initParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletConfig</span> servletConfig <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> username <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> password <span class="token operator">=</span> servletConfig<span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="★servletcontext" tabindex="-1"><a class="header-anchor" href="#★servletcontext" aria-hidden="true">#</a> ★ServletContext</h1><p><strong>整个Web应用提供的共享空间，应用程序启动的时候会初始化，可以通过键值对的方式在存储和取出数据</strong></p><p>Servlet上下文，开发过程中使用ServletContext实例（对象），使用这个实例其实维护的也是键值对</p><p>前面的ServletConfig是每一个Servlet使用的单独的一个ServletConfig</p><p>而ServletContext是所有的Servlet共享的</p><p>在所有的Servlet中都可以通过方法直接获得ServletContext，并且获得的是同一个ServletContext，在ServletContext中提供的数据其实就是被所有的Servlet共享了</p><h2 id="获得方式" tabindex="-1"><a class="header-anchor" href="#获得方式" aria-hidden="true">#</a> 获得方式</h2><blockquote><ol><li>在Servlet中直接使用getServletContext()</li><li>通过ServletConfig提供的getServletContext方法来获得</li></ol></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/hello&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletContext</span> servletContext1 <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ServletContext</span> servletContext2 <span class="token operator">=</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletContext1 = &quot;</span> <span class="token operator">+</span> servletContext1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletContext2 = &quot;</span> <span class="token operator">+</span> servletContext2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/bye&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodbyeServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;servletContext = &quot;</span> <span class="token operator">+</span> servletContext<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>想要在所有的Servlet中共享数据</p><p>username=root</p><p>password=123456</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/parameter&quot;</span><span class="token punctuation">,</span>loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">// 写正数，意味着应用程序启动的时候初始化，初始化会开始生命周期的init方法</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ParameterServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span>
        <span class="token class-name">ServletContext</span> servletContext <span class="token operator">=</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;123456&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="获得真实路径-了解" tabindex="-1"><a class="header-anchor" href="#获得真实路径-了解" aria-hidden="true">#</a> 获得真实路径（了解）</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 获得web资源的真实路径 → docBase里的真实路径</span>
<span class="token class-name">String</span> realPath <span class="token operator">=</span> servletContext1<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;realPath = &quot;</span> <span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token class-name">String</span> realPath1 <span class="token operator">=</span> servletContext1<span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">&quot;hello.html&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;realPath1 = &quot;</span> <span class="token operator">+</span> realPath1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="xml配置-了解项" tabindex="-1"><a class="header-anchor" href="#xml配置-了解项" aria-hidden="true">#</a> xml配置（了解项）</h1><p>当前使用的是注解的方式来配置</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>4.0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   
   <span class="token comment">&lt;!--value属性（或url-pattern属性）：映射的url-pattern
   initParams属性：提供的初始化参数，可以通过ServletConfig来获得
   load-on-startup属性
    @WebServlet(value = &quot;/HelloServlet&quot;,
    initParams = @WebInitParam(name = &quot;username&quot;,value = &quot;root&quot;),
    loadOnStartup = 1)--&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.cskaoyan.service.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>
    
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h1><p>Server处理请求的入口</p><p>@WebServlet的 value属性</p><p>ServletContext对象 → 伴随应用程序启动创建的一个全局共享的对象</p><h1 id="★-web应用和maven工程" tabindex="-1"><a class="header-anchor" href="#★-web应用和maven工程" aria-hidden="true">#</a> ★_Web应用和Maven工程</h1><p>编译为Tomcat所支持的web应用</p><h2 id="web应用的目录结构" tabindex="-1"><a class="header-anchor" href="#web应用的目录结构" aria-hidden="true">#</a> Web应用的目录结构</h2><blockquote><ul><li>Web应用的根目录（idea → target/artifactid-version → 配置tomcat做的虚拟映射的docBase） <ul><li>可以直接访问的资源（主要是静态资源，比如html、js、css、图片等）</li><li>WEB-INF文件夹 （受保护的资源的文件） <ul><li>classes文件夹（web应用的类加载路径classpath：字节码文件、配置文件）</li><li>lib文件夹(第三方的依赖)</li><li>web.xml(web应用的描述文件 → 基本上可以不使用了)</li><li>其他的文件（其他不想被直接访问的资源）</li></ul></li></ul></li></ul></blockquote><figure><img src="`+h+'" alt="image-20230202151408305" tabindex="0" loading="lazy"><figcaption>image-20230202151408305</figcaption></figure><h2 id="maven工程的目录结构" tabindex="-1"><a class="header-anchor" href="#maven工程的目录结构" aria-hidden="true">#</a> Maven工程的目录结构</h2><blockquote><ul><li>Maven工程的根目录 <ul><li>src文件夹 <ul><li>main文件夹（开发） <ul><li>java文件夹（java代码）</li><li>resources文件夹（配置文件）</li><li>webapp文件夹（web资源-对应的是web资源目录） <ul><li>WEB-INF</li></ul></li></ul></li><li>test文件夹（测试）</li></ul></li><li>pom.xml文件</li><li>target文件夹 <ul><li>classes文件夹</li><li>{artifactid}-{version}文件夹（tomcat虚拟映射的docBase）</li></ul></li></ul></li></ul></blockquote><h2 id="对应关系图-核心" tabindex="-1"><a class="header-anchor" href="#对应关系图-核心" aria-hidden="true">#</a> 对应关系图（核心）</h2><figure><img src="'+S+'" alt="image-20230202152234992" tabindex="0" loading="lazy"><figcaption>image-20230202152234992</figcaption></figure><p>非常重要：贯穿整个阶段</p><p>遇到一些问题：</p><ul><li>ClassNotFound：编译后的内容里没有这个类 → target/artifactid-version/WEB-INF/ 里的classes、lib目录 <ul><li>classes里没有 → src/main/java</li><li>lib里没有 → pom.xml</li></ul></li><li>FileNotFound → target/artifactid-version/</li></ul>',119);function y(E,C){const s=t("center");return e(),p("div",null,[x,o(s,null,{default:l(()=>[q]),_:1}),w])}const P=a(f,[["render",y],["__file","Content01-Servlet.html.vue"]]);export{P as default};
